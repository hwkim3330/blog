NOTICE:  Reset status: External Reset: RESET_B (RUN)
NOTICE:  BL2: v2.10.14(release):bsp44.0-2.10.14
NOTICE:  BL2: Built : 08:13:32, May 13 2025
NOTICE:  BL2: Booting BL31


U-Boot 2022.04+g9a00323278+p0 (May 13 2025 - 06:57:56 +0000)

SoC:   NXP S32G274A rev. 2.1
CPU:   ARM Cortex-A53 r0p4 @ max 1000 MHz
Model: NXP S32G274A-RDB2
DRAM:  4 GiB
Core:  314 devices, 25 uclasses, devicetree: board
MMC:   FSL_SDHC: 0
Loading Environment from MMC... OK
s32cc_serdes_phy serdes@40480000: Using mode 0 for SerDes subsystem
pci_s32cc pcie@40400000: Could not set DEVICE ID
pci_s32cc pcie@40400000: Configuring as RootComplex
pci_s32cc pcie@40400000: Failed to get link up
In:    serial@401c8000
Out:   serial@401c8000
Err:   serial@401c8000
Board revision: RDB2/GLDBOX Revision E
PCIe:   BusDevFun       VendorId   DeviceId   Device Class       Sub-Class
__________________________________________________________________________
pcie@40400000 RootComplex
|   `-- 01:00.00        0x1957     0x4002     Bridge device           0x04
Net:
Warning: ethernet@4033c000 (eth0) using random MAC address - 66:f0:c7:e4:f1:6b
eth0: ethernet@4033c000
Found PFE version 0x50300 (S32G2)
pfeng pfeng-base: Uploading CLASS firmware
pfeng pfeng-base: EMAC0 block was initialized
pfeng pfeng-base: EMAC1 block was initialized
pfeng pfeng-base: EMAC2 block was initialized
pfeng pfeng-base: Enabling the CLASS block
pfeng pfeng-base: PFE Platform started successfully (mask: 7)
s32cc_serdes_phy serdes@44180000: Using mode 4 for SerDes subsystem
s32cc_serdes_phy serdes@44180000: Unstable RX detected on XPCS0
, eth1: pfe0s32cc_serdes_phy serdes@44180000: Unstable RX detected on XPCS1
, eth2: pfe1, eth3: pfe2
Hit any key to stop autoboot:  0
switch to partitions #0, OK
mmc0 is current device
17139720 bytes read in 720 ms (22.7 MiB/s)
Booting from mmc ...
59234 bytes read in 6 ms (9.4 MiB/s)
## Flattened Device Tree blob at 83000000
   Booting using the fdt blob at 0x83000000
   Using Device Tree in place at 0000000083000000, end 0000000083011761
   fixup: pfe1: update phy addr to 0x8
Failed to configure XPCS1_1
Failed to update XPCS1 for SerDes1

Starting kernel ...

[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034]
[    0.000000] Linux version 6.6.85-rt53-g6208e1d0d7b5 (oe-user@oe-host) (aarch64-fsl-linux-gcc (GCC) 13.3.0, GNU ld                                                                                                                         (GNU Binutils) 2.42.0.20240723) #1 SMP PREEMPT Wed May 14 13:40:03 UTC 2025
[    0.000000] Machine model: NXP S32G2 Reference Design Board 2 (S32G-VNP-RDB2)
[    0.000000] earlycon: linflex0 at MMIO 0x00000000401c8000 (options '')
[    0.000000] printk: legacy bootconsole [linflex0] enabled
[    0.000000] OF: reserved mem: 0x0000000034000000..0x000000003407ffff (512 KiB) nomap non-reusable pfebufs@34000000
[    0.000000] OF: reserved mem: 0x0000000034080000..0x000000003409ffff (128 KiB) nomap non-reusable pfebufs@34080000
[    0.000000] Reserved memory: created DMA memory pool at 0x0000000083200000, size 3 MiB
[    0.000000] OF: reserved mem: initialized node pfebufs@83200000, compatible id shared-dma-pool
[    0.000000] OF: reserved mem: 0x0000000083200000..0x00000000835dffff (3968 KiB) nomap non-reusable pfebufs@8320000                                                                                                                        0
[    0.000000] OF: reserved mem: 0x00000000835e0000..0x00000000835fffff (128 KiB) map non-reusable pfebufs@835e0000
[    0.000000] OF: reserved mem: 0x0000000084000000..0x0000000084ffffff (16384 KiB) nomap non-reusable shm@84000000
[    0.000000] OF: reserved mem: 0x00000000c0000000..0x00000000c03fffff (4096 KiB) nomap non-reusable shm@c0000000
[    0.000000] OF: reserved mem: 0x00000000c0400000..0x00000000c07fffff (4096 KiB) nomap non-reusable shm@c0400000
[    0.000000] OF: reserved mem: 0x00000000d0000000..0x00000000d000007f (0 KiB) nomap non-reusable shm@d0000000
[    0.000000] OF: reserved mem: 0x00000000d0000080..0x00000000d00000ff (0 KiB) nomap non-reusable shm@d0000080
[    0.000000] OF: reserved mem: 0x00000000ff600000..0x00000000ff7fffff (2048 KiB) nomap non-reusable atf@ff600000
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000080000000-0x00000000ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   [mem 0x0000000100000000-0x00000008ffffffff]
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000080000000-0x00000000831fffff]
[    0.000000]   node   0: [mem 0x0000000083200000-0x00000000835dffff]
[    0.000000]   node   0: [mem 0x00000000835e0000-0x0000000083ffffff]
[    0.000000]   node   0: [mem 0x0000000084000000-0x0000000084ffffff]
[    0.000000]   node   0: [mem 0x0000000085000000-0x00000000bfffffff]
[    0.000000]   node   0: [mem 0x00000000c0000000-0x00000000c07fffff]
[    0.000000]   node   0: [mem 0x00000000c0800000-0x00000000cfffffff]
[    0.000000]   node   0: [mem 0x00000000d0001000-0x00000000ff5fffff]
[    0.000000]   node   0: [mem 0x00000000ff600000-0x00000000ff7fffff]
[    0.000000]   node   0: [mem 0x00000000ff800000-0x00000000ffffffff]
[    0.000000]   node   0: [mem 0x0000000880000000-0x00000008ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000080000000-0x00000008ffffffff]
[    0.000000] On node 0, zone DMA: 1 pages in unavailable ranges
[    0.000000] cma: Reserved 256 MiB at 0x00000000ef600000 on node -1
[    0.000000] psci: probing for conduit method from DT.
[    0.000000] psci: PSCIv1.1 detected in firmware.
[    0.000000] psci: Using standard PSCI v0.2 function IDs
[    0.000000] psci: MIGRATE_INFO_TYPE not supported.
[    0.000000] psci: SMC Calling Convention v1.4
[    0.000000] percpu: Embedded 19 pages/cpu s40104 r8192 d29528 u77824
[    0.000000] Detected VIPT I-cache on CPU0
[    0.000000] CPU features: detected: GIC system register CPU interface
[    0.000000] CPU features: detected: ARM erratum 845719
[    0.000000] CPU features: detected: NXP erratum ERR050481 (TLBI by VA handled incorrectly)
[    0.000000] CPU features: detected: ARM errata 1165522, 1319367, 1530923, or 1530924
[    0.000000] alternatives: applying boot alternatives
[    0.000000] Kernel command line: console=ttyLF0,115200 root=/dev/mmcblk0p3 rootwait rw earlycon
[    0.000000] Dentry cache hash table entries: 524288 (order: 10, 4194304 bytes, linear)
[    0.000000] Inode-cache hash table entries: 262144 (order: 9, 2097152 bytes, linear)
[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 1032191
[    0.000000] mem auto-init: stack:all(zero), heap alloc:off, heap free:off
[    0.000000] software IO TLB: area num 4.
[    0.000000] software IO TLB: mapped [mem 0x00000000eb600000-0x00000000ef600000] (64MB)
[    0.000000] Memory: 3737540K/4194300K available (10688K kernel code, 738K rwdata, 3220K rodata, 1984K init, 233K b                                                                                                                        ss, 194616K reserved, 262144K cma-reserved)
[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=4, Nodes=1
[    0.000000] rcu: Preemptible hierarchical RCU implementation.
[    0.000000] rcu:     RCU event tracing is enabled.
[    0.000000] rcu:     RCU restricting CPUs from NR_CPUS=8 to nr_cpu_ids=4.
[    0.000000]  Trampoline variant of Tasks RCU enabled.
[    0.000000]  Tracing variant of Tasks RCU enabled.
[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
[    0.000000] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=4
[    0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0
[    0.000000] GICv3: GIC: Using split EOI/Deactivate mode
[    0.000000] GICv3: 544 SPIs implemented
[    0.000000] GICv3: 0 Extended SPIs implemented
[    0.000000] GICv3: MBI range [167:182]
[    0.000000] GICv3: Using MBI frame 0x0000000050800000
[    0.000000] Root IRQ handler: gic_handle_irq
[    0.000000] GICv3: GICv3 features: 16 PPIs
[    0.000000] GICv3: CPU0: found redistributor 0 region 0:0x0000000050880000
[    0.000000] ITS: No ITS available, not enabling LPIs
[    0.000000] rcu: srcu_init: Setting srcu_struct sizes based on contention.
[    0.000000] arch_timer: cp15 timer(s) running at 5.00MHz (phys).
[    0.000000] clocksource: arch_sys_counter: mask: 0xffffffffffffff max_cycles: 0x127350b88, max_idle_ns: 4407952021                                                                                                                        20 ns
[    0.000001] sched_clock: 56 bits at 5MHz, resolution 200ns, wraps every 4398046511100ns
[    0.008462] Console: colour dummy device 80x25
[    0.012522] Calibrating delay loop (skipped), value calculated using timer frequency.. 10.00 BogoMIPS (lpj=20000)
[    0.022725] pid_max: default: 32768 minimum: 301
[    0.027448] Mount-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
[    0.034719] Mountpoint-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
[    0.044329] RCU Tasks: Setting shift to 2 and lim to 1 rcu_task_cb_adjust=1 rcu_task_cpu_ids=4.
[    0.052712] RCU Tasks Trace: Setting shift to 2 and lim to 1 rcu_task_cb_adjust=1 rcu_task_cpu_ids=4.
[    0.062046] rcu: Hierarchical SRCU implementation.
[    0.066588] rcu:     Max phase no-delay instances is 1000.
[    0.072896] smp: Bringing up secondary CPUs ...
[    0.077725] Detected VIPT I-cache on CPU1
[    0.077809] GICv3: CPU1: found redistributor 1 region 0:0x00000000508a0000
[    0.077865] CPU1: Booted secondary processor 0x0000000001 [0x410fd034]
[    0.078665] Detected VIPT I-cache on CPU2
[    0.078740] GICv3: CPU2: found redistributor 100 region 0:0x00000000508c0000
[    0.078781] CPU2: Booted secondary processor 0x0000000100 [0x410fd034]
[    0.079485] Detected VIPT I-cache on CPU3
[    0.079533] GICv3: CPU3: found redistributor 101 region 0:0x00000000508e0000
[    0.079558] CPU3: Booted secondary processor 0x0000000101 [0x410fd034]
[    0.079651] smp: Brought up 1 node, 4 CPUs
[    0.135772] SMP: Total of 4 processors activated.
[    0.140441] CPU features: detected: 32-bit EL0 Support
[    0.145584] CPU features: detected: CRC32 instructions
[    0.150764] CPU: All CPU(s) started at EL2
[    0.154777] alternatives: applying system-wide alternatives
[    0.162524] devtmpfs: initialized
[    0.176346] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.185709] futex hash table entries: 1024 (order: 4, 65536 bytes, linear)
[    0.201963] pinctrl core: initialized pinctrl subsystem
[    0.207783] NET: Registered PF_NETLINK/PF_ROUTE protocol family
[    0.214416] DMA: preallocated 512 KiB GFP_KERNEL pool for atomic allocations
[    0.221312] DMA: preallocated 512 KiB GFP_KERNEL|GFP_DMA pool for atomic allocations
[    0.229107] DMA: preallocated 512 KiB GFP_KERNEL|GFP_DMA32 pool for atomic allocations
[    0.237143] thermal_sys: Registered thermal governor 'step_wise'
[    0.237290] hw-breakpoint: found 6 breakpoint and 4 watchpoint registers.
[    0.249738] ASID allocator initialised with 65536 entries
[    0.255150] Serial: AMBA PL011 UART driver
[    0.259161] scmi_core: SCMI protocol bus registered
[    0.265296] scmi_protocol scmi_dev.1: Enabled polling mode TX channel - prot_id:16
[    0.272865] arm-scmi firmware:scmi: SCMI Notifications - Core Enabled.
[    0.279035] arm-scmi firmware:scmi: SCMI Protocol v2.0 'NXP:S32G274A' Firmware version 0x0
[    0.296215] /soc/interrupt-controller@50800000: Fixed dependency cycle(s) with /soc/interrupt-controller@50800000
[    0.308416] /soc/siul2@4009c000/siul2-pinctrl@4009c240: Fixed dependency cycle(s) with /soc/siul2@4009c000/siul2-p                                                                                                                        inctrl@4009c240/jtag_pins
[    0.331000] Modules: 28512 pages in range for non-PLT usage
[    0.331023] Modules: 520032 pages in range for PLT usage
[    0.336780] HugeTLB: registered 1.00 GiB page size, pre-allocated 0 pages
[    0.348433] HugeTLB: 0 KiB vmemmap can be freed for a 1.00 GiB page
[    0.354685] HugeTLB: registered 32.0 MiB page size, pre-allocated 0 pages
[    0.361452] HugeTLB: 0 KiB vmemmap can be freed for a 32.0 MiB page
[    0.367705] HugeTLB: registered 2.00 MiB page size, pre-allocated 0 pages
[    0.374474] HugeTLB: 0 KiB vmemmap can be freed for a 2.00 MiB page
[    0.380725] HugeTLB: registered 64.0 KiB page size, pre-allocated 0 pages
[    0.387492] HugeTLB: 0 KiB vmemmap can be freed for a 64.0 KiB page
[    0.403465] SCSI subsystem initialized
[    0.407021] usbcore: registered new interface driver usbfs
[    0.412305] usbcore: registered new interface driver hub
[    0.417606] usbcore: registered new device driver usb
[    0.423352] pps_core: LinuxPPS API ver. 1 registered
[    0.427887] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti <giometti@linux.it>
[    0.437011] PTP clock support registered
[    0.442170] vgaarb: loaded
[    0.444812] clocksource: Switched to clocksource arch_sys_counter
[    0.458806] NET: Registered PF_INET protocol family
[    0.463552] IP idents hash table entries: 65536 (order: 7, 524288 bytes, linear)
[    0.474004] tcp_listen_portaddr_hash hash table entries: 2048 (order: 3, 32768 bytes, linear)
[    0.482196] Table-perturb hash table entries: 65536 (order: 6, 262144 bytes, linear)
[    0.489840] TCP established hash table entries: 32768 (order: 6, 262144 bytes, linear)
[    0.497984] TCP bind hash table entries: 32768 (order: 8, 1048576 bytes, linear)
[    0.506272] TCP: Hash tables configured (established 32768 bind 32768)
[    0.512599] UDP hash table entries: 2048 (order: 4, 65536 bytes, linear)
[    0.519177] UDP-Lite hash table entries: 2048 (order: 4, 65536 bytes, linear)
[    0.526465] NET: Registered PF_UNIX/PF_LOCAL protocol family
[    0.532366] RPC: Registered named UNIX socket transport module.
[    0.537864] RPC: Registered udp transport module.
[    0.542546] RPC: Registered tcp transport module.
[    0.547229] RPC: Registered tcp-with-tls transport module.
[    0.552698] RPC: Registered tcp NFSv4.1 backchannel transport module.
[    0.559157] PCI: CLS 0 bytes, default 64
[    0.564469] workingset: timestamp_bits=62 max_order=20 bucket_order=0
[    0.571154] fuse: init (API version 7.39)
[    0.574938] NET: Registered PF_ALG protocol family
[    0.579563] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 248)
[    0.586894] io scheduler mq-deadline registered
[    0.591404] io scheduler kyber registered
[    0.595405] io scheduler bfq registered
[    0.603693] s32cc-siul2-pinctrl 4009c240.siul2-pinctrl: initialized s32 pinctrl driver
[    0.613100] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.620998] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.629506] gpio gpiochip0: Static allocation of GPIO base is deprecated, use dynamic allocation.
[    0.639067] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.646903] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.667033] printk: legacy console [ttyLF0] enabled000 (irq = 23, base_baud = 7812500) is a FSL_LINFLEX
[    0.667033] printk: legacy console [ttyLF0] enabled
[    0.676946] printk: legacy bootconsole [linflex0] disabled
[    0.676946] printk: legacy bootconsole [linflex0] disabled
[    0.689731] 401cc000.serial: ttyLF1 at MMIO 0x401cc000 (irq = 24, base_baud = 7812500) is a FSL_LINFLEX
[    0.701123] s32cc_fccu 4030c000.fccu: FCCU status is 0 (normal)
[    0.710319] sja1110-sw@1 enforce active low on GPIO handle
[    0.718869] spi-nor spi6.0: mx25uw51245g (65536 Kbytes)
[    0.724783] 8 fixed-partitions partitions found on MTD device 0.spi
[    0.731161] Creating 8 MTD partitions on "0.spi":
[    0.735948] 0x000000000000-0x000004000000 : "Flash-Image"
[    0.741819] 0x000000000000-0x0000000d0000 : "BL2"
[    0.746928] 0x0000000d0000-0x0000002a0000 : "FIP"
[    0.752044] 0x0000002a0000-0x0000002b0000 : "U-Boot-Env"
[    0.757769] 0x0000002b0000-0x000001380000 : "Kernel"
[    0.763140] 0x000001380000-0x0000013b0000 : "DTB"
[    0.768263] 0x0000013b0000-0x0000032c0000 : "Rootfs"
[    0.773639] 0x0000032c0000-0x000004000000 : "PFE-Firmware"
[    0.781865] vcan: Virtual CAN interface driver
[    0.786394] slcan: serial line CAN interface driver
[    0.791348] CAN device driver interface
[    0.796578] flexcan 401b4000.can: device registered (reg_base=(____ptrval____), irq(s):
[    0.804725] flexcan 401b4000.can:  30
[    0.808458] flexcan 401b4000.can:  31
[    0.812178] flexcan 401b4000.can:  32
[    0.815897] flexcan 401b4000.can:  33
[    0.819615] flexcan 401b4000.can: )
[    0.824187] flexcan 401be000.can: device registered (reg_base=(____ptrval____), irq(s):
[    0.832333] flexcan 401be000.can:  34
[    0.836063] flexcan 401be000.can:  35
[    0.839781] flexcan 401be000.can:  36
[    0.843501] flexcan 401be000.can:  37
[    0.847222] flexcan 401be000.can: )
[    0.851103] e100: Intel(R) PRO/100 Network Driver
[    0.855881] e100: Copyright(c) 1999-2006 Intel Corporation
[    0.861481] e1000: Intel(R) PRO/1000 Network Driver
[    0.866435] e1000: Copyright (c) 1999-2006 Intel Corporation.
[    0.872299] e1000e: Intel(R) PRO/1000 Network Driver
[    0.877336] e1000e: Copyright(c) 1999 - 2015 Intel Corporation.
[    0.883373] igb: Intel(R) Gigabit Ethernet Network Driver
[    0.888858] igb: Copyright (c) 2007-2014 Intel Corporation.
[    0.895820] hse-uio 40210000.mu0b: firmware not found
[    0.901588] usbcore: registered new interface driver uas
[    0.907027] usbcore: registered new interface driver usb-storage
[    0.914274] imx_usb 44064000.usb: No over current polarity defined
[    0.933214] ci_hdrc ci_hdrc.0: EHCI Host Controller
[    0.938353] ci_hdrc ci_hdrc.0: new USB bus registered, assigned bus number 1
[    0.960822] ci_hdrc ci_hdrc.0: USB 2.0 started, EHCI 1.00
[    0.966484] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002, bcdDevice= 6.06
[    0.974881] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    0.982217] usb usb1: Product: EHCI Host Controller
[    0.987172] usb usb1: Manufacturer: Linux 6.6.85-rt53-g6208e1d0d7b5 ehci_hcd
[    0.994332] usb usb1: SerialNumber: ci_hdrc.0
[    0.999348] hub 1-0:1.0: USB hub found
[    1.003190] hub 1-0:1.0: 1 port detected
[    1.009118] s32cc-rtc 40060000.rtc: registered as rtc0
[    1.014370] s32cc-rtc 40060000.rtc: setting system clock to 1970-01-01T00:00:00 UTC (0)
[    1.022712] i2c_dev: i2c /dev entries driver
[    1.027641] s32cc-wdt 4010c000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.037743] s32cc-wdt 40200000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.047037] s32cc-wdt 40204000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.056318] s32cc-wdt 40208000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.067412] sdhci: Secure Digital Host Controller Interface driver
[    1.073724] sdhci: Copyright(c) Pierre Ossman
[    1.078155] sdhci-pltfm: SDHCI platform and OF driver helper
[    1.084203] SMCCC: SOC_ID: ARCH_SOC_ID not implemented, skipping ....
[    1.091437] hse 40211000.mu1b: interface mu1b not active
[    1.097506] usbcore: registered new interface driver usbhid
[    1.103176] usbhid: USB HID core driver
[    1.116559] mmc0: SDHCI controller on 402f0000.mmc [402f0000.mmc] using ADMA
[    1.123893] s32-adc 401f8000.adc: using dma0chan4 for ADC DMA transfers
[    1.131226] s32-adc 401f8000.adc: Device initialized successfully.
[    1.149054] s32-adc 402e8000.adc: using dma1chan16 for ADC DMA transfers
[    1.156403] s32-adc 402e8000.adc: Device initialized successfully.
[    1.158181] mmc0: new high speed SDHC card at address 0001
[    1.168703] hw perfevents: enabled with armv8_cortex_a53 PMU driver, 7 counters available
[    1.168914] mmcblk0: mmc0:0001 SD32G 28.8 GiB
[    1.178742] s32-siul2-nvmem 4009c000.nvram: Initialized s32cc siul2 nvmem driver
[    1.183496]  mmcblk0: p1 p2 p3
[    1.189159] s32-siul2-nvmem 44010000.nvram: Initialized s32cc siul2 nvmem driver
[    1.200196] GACT probability on
[    1.203413] Mirror/redirect action on
[    1.207213] Simple TC action Loaded
[    1.211341] netem: version 1.3
[    1.214506] u32 classifier
[    1.217255]     Performance counters on
[    1.221146]     input device check on
[    1.224869]     Actions configured
[    1.229659] xt_time: kernel timezone is -0000
[    1.234320] NET: Registered PF_INET6 protocol family
[    1.240394] Segment Routing with IPv6
[    1.244168] In-situ OAM (IOAM) with IPv6
[    1.248257] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
[    1.254807] NET: Registered PF_PACKET protocol family
[    1.260077] can: controller area network core
[    1.264552] NET: Registered PF_CAN protocol family
[    1.269417] can: raw protocol
[    1.272426] can: broadcast manager protocol
[    1.276677] can: netlink gateway - max_hops=1
[    1.281182] 8021q: 802.1Q VLAN Support v1.8
[    1.305702] i2c i2c-0: using pinctrl states for GPIO recovery
[    1.311659] i2c i2c-0: using generic GPIOs for recovery
[    1.317748] pca953x 0-0022: using AI
[    1.328293] rtc-pcf85063 0-0051: registered as rtc1
[    1.333316] i2c i2c-0: IMX I2C adapter registered
[    1.338170] i2c i2c-0: using dma0chan5 (tx) and dma0chan6 (rx) for DMA transfers
[    1.346469] i2c i2c-2: using pinctrl states for GPIO recovery
[    1.352394] i2c i2c-2: using generic GPIOs for recovery
[    1.357792] i2c i2c-2: IMX I2C adapter registered
[    1.362627] i2c i2c-2: using dma1chan17 (tx) and dma1chan18 (rx) for DMA transfers
[    1.371066] i2c i2c-4: using pinctrl states for GPIO recovery
[    1.376973] i2c i2c-4: using generic GPIOs for recovery
[    1.383854] ina2xx 4-0040: power monitor ina231 (Rshunt = 1000 uOhm)
[    1.390359] i2c i2c-4: IMX I2C adapter registered
[    1.395198] i2c i2c-4: using dma1chan19 (tx) and dma1chan20 (rx) for DMA transfers
[    1.424003] phy-s32cc-serdes 40480000.serdes: Using mode 0 for SerDes subsystem
[    1.431928] phy-s32cc-serdes 44180000.serdes: Using mode 4 for SerDes subsystem
[    1.762709] s32cc-pcie 40400000.pcie: Failed to stabilize PHY link
[    1.768997] s32cc-pcie 40400000.pcie: Configuring as RootComplex
[    1.775139] s32cc-pcie 40400000.pcie: host bridge /soc/pcie@40400000 ranges:
[    1.782335] s32cc-pcie 40400000.pcie:       IO 0x5ffffe0000..0x5ffffeffff -> 0x0000000000
[    1.790654] s32cc-pcie 40400000.pcie:      MEM 0x5800000000..0x5ffffdffff -> 0x0000000000
[    1.798985] s32cc-pcie 40400000.pcie: Memory resource size exceeds max for 32 bits
[    2.806822] s32cc-pcie 40400000.pcie: Phy link never came up
[    2.812587] s32cc-pcie 40400000.pcie: Link Up failed, EndPoint may not be connected
[    2.820389] s32cc-pcie 40400000.pcie: iATU: unroll T, 6 ob, 4 ib, align 4K, limit 1024G
[    3.828708] s32cc-pcie 40400000.pcie: Phy link never came up
[    3.834464] s32cc-pcie 40400000.pcie: Link Up failed, EndPoint may not be connected
[    4.836934] s32cc-pcie 40400000.pcie: Phy link never came up
[    4.843283] s32cc-pcie 40400000.pcie: PCI host bridge to bus 0000:00
[    4.849749] pci_bus 0000:00: root bus resource [bus 00-ff]
[    4.855324] pci_bus 0000:00: root bus resource [io  0x0000-0xffff]
[    4.861607] pci_bus 0000:00: root bus resource [mem 0x5800000000-0x5ffffdffff] (bus address [0x00000000-0x7fffdfff                                                                                                                        f])
[    4.872416] pci 0000:00:00.0: [1957:4002] type 01 class 0x060400
[    4.878536] pci 0000:00:00.0: reg 0x10: [mem 0x5800000000-0x58000fffff]
[    4.885267] pci 0000:00:00.0: reg 0x38: [mem 0x5800000000-0x580000ffff pref]
[    4.892519] pci 0000:00:00.0: supports D1
[    4.896596] pci 0000:00:00.0: PME# supported from D0 D1 D3hot D3cold
[    4.906733] pci 0000:00:00.0: BAR 0: assigned [mem 0x5800000000-0x58000fffff]
[    4.913993] pci 0000:00:00.0: BAR 6: assigned [mem 0x5800100000-0x580010ffff pref]
[    4.921686] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    4.927371] pcieport 0000:00:00.0: PME: Signaling with IRQ 51
[    4.934577] s32cc-dwmac 4033c000.ethernet: IRQ eth_wake_irq not found
[    4.941139] s32cc-dwmac 4033c000.ethernet: IRQ eth_lpi not found
[    4.948215] s32cc-dwmac 4033c000.ethernet: User ID: 0x10, Synopsys ID: 0x51
[    4.955306] s32cc-dwmac 4033c000.ethernet:   DWMAC4/5
[    4.960358] s32cc-dwmac 4033c000.ethernet: DMA HW capability register supported
[    4.967783] s32cc-dwmac 4033c000.ethernet: RX Checksum Offload Engine supported
[    4.975205] s32cc-dwmac 4033c000.ethernet: TX Checksum insertion supported
[    4.982183] s32cc-dwmac 4033c000.ethernet: Wake-Up On Lan supported
[    4.988617] s32cc-dwmac 4033c000.ethernet: Enable RX Mitigation via HW Watchdog Timer
[    4.996570] s32cc-dwmac 4033c000.ethernet: Enabled L3L4 Flow TC (entries=8)
[    5.003655] s32cc-dwmac 4033c000.ethernet: Enabled RFS Flow TC (entries=10)
[    5.010763] s32cc-dwmac 4033c000.ethernet: Enabling HW TC (entries=256, max_off=256)
[    5.018631] s32cc-dwmac 4033c000.ethernet: Using 32/32 bits DMA host/device width
[    5.032991] hwmon hwmon1: temp1_input not attached to any thermal zone
[    5.042391] qoriq_thermal 400a8000.tmu: Critical rising/falling temperature threshold = 5 degree(s)
[    5.057108] nxp_s32cc_ddr_perf 403e0000.ddr-perf: probing device
[    5.063586] nxp_s32cc_ddr_perf 403e0000.ddr-perf: device initialized successfully
[    5.071510] clk: Disabling unused clocks
[    5.269374] EXT4-fs (mmcblk0p3): recovery complete
[    5.276998] EXT4-fs (mmcblk0p3): mounted filesystem 7998e1b8-8d1a-412f-8924-0a57aa6bfd99 r/w with ordered data mod                                                                                                                        e. Quota mode: disabled.
[    5.289099] VFS: Mounted root (ext4 filesystem) on device 179:3.
[    5.295948] devtmpfs: mounted
[    5.299342] Freeing unused kernel memory: 1984K
[    5.303755] Run /sbin/init as init process
[    5.835255] systemd[1]: System time before build time, advancing clock.
[    5.920794] systemd[1]: systemd 255.13^ running in system mode (+PAM -AUDIT -SELINUX -APPARMOR +IMA -SMACK +SECCOM                                                                                                                        P -GCRYPT -GNUTLS -OPENSSL +ACL +BLKID -CURL -ELFUTILS -FIDO2 -IDN2 -IDN -IPTC +KMOD -LIBCRYPTSETUP +LIBFDISK -PCRE2                                                                                                                         -PWQUALITY -P11KIT -QRENCODE -TPM2 -BZIP2 -LZ4 -XZ -ZLIB +ZSTD -BPF_FRAMEWORK +XKBCOMMON +UTMP +SYSVINIT default-hier                                                                                                                        archy=unified)
[    5.952421] systemd[1]: Detected architecture arm64.

Welcome to Auto Linux BSP 44.0 (scarthgap)!

[    5.979213] systemd[1]: Hostname set to <s32g274ardb2>.
[    6.581488] systemd[1]: Queued start job for default target Multi-User System.
[    6.593710] systemd[1]: Created slice Slice /system/getty.
[  OK  ] Created slice Slice /system/getty.
[    6.618325] systemd[1]: Created slice Slice /system/modprobe.
[  OK  ] Created slice Slice /system/modprobe.
[    6.642321] systemd[1]: Created slice Slice /system/serial-getty.
[  OK  ] Created slice Slice /system/serial-getty.
[    6.665801] systemd[1]: Created slice User and Session Slice.
[  OK  ] Created slice User and Session Slice.
[    6.689290] systemd[1]: Started Dispatch Password Requests to Console Directory Watch.
[  OK  ] Started Dispatch Password Requests to Console Directory Watch.
[    6.717162] systemd[1]: Started Forward Password Requests to Wall Directory Watch.
[  OK  ] Started Forward Password Requests to Wall Directory Watch.
[    6.741168] systemd[1]: Reached target Path Units.
[  OK  ] Reached target Path Units.
[    6.760980] systemd[1]: Reached target Remote File Systems.
[  OK  ] Reached target Remote File Systems.
[    6.780963] systemd[1]: Reached target Slice Units.
[  OK  ] Reached target Slice Units.
[    6.801001] systemd[1]: Reached target Swaps.
[  OK  ] Reached target Swaps.
[    6.849553] systemd[1]: Listening on RPCbind Server Activation Socket.
[  OK  ] Listening on RPCbind Server Activation Socket.
[    6.873132] systemd[1]: Reached target RPC Port Mapper.
[  OK  ] Reached target RPC Port Mapper.
[    6.893755] systemd[1]: Listening on Syslog Socket.
[  OK  ] Listening on Syslog Socket.
[    6.913351] systemd[1]: Listening on initctl Compatibility Named Pipe.
[  OK  ] Listening on initctl Compatibility Named Pipe.
[    6.943852] systemd[1]: Journal Audit Socket was skipped because of an unmet condition check (ConditionSecurity=au                                                                                                                        dit).
[    6.955010] systemd[1]: Listening on Journal Socket (/dev/log).
[  OK  ] Listening on Journal Socket (/dev/log).
[    6.977761] systemd[1]: Listening on Journal Socket.
[  OK  ] Listening on Journal Socket.
[    6.997930] systemd[1]: Listening on Network Service Netlink Socket.
[  OK  ] Listening on Network Service Netlink Socket.
[    7.034389] systemd[1]: Listening on udev Control Socket.
[  OK  ] Listening on udev Control Socket.
[    7.057634] systemd[1]: Listening on udev Kernel Socket.
[  OK  ] Listening on udev Kernel Socket.
[    7.077679] systemd[1]: Listening on User Database Manager Socket.
[  OK  ] Listening on User Database Manager Socket.
[    7.129094] systemd[1]: Mounting Huge Pages File System...
         Mounting Huge Pages File System...
[    7.149376] systemd[1]: POSIX Message Queue File System was skipped because of an unmet condition check (Condition                                                                                                                        PathExists=/proc/sys/fs/mqueue).
[    7.182860] systemd[1]: Mounting Kernel Debug File System...
         Mounting Kernel Debug File System...
[    7.205494] systemd[1]: Kernel Trace File System was skipped because of an unmet condition check (ConditionPathExi                                                                                                                        sts=/sys/kernel/tracing).
[    7.218339] systemd[1]: Create List of Static Device Nodes was skipped because of an unmet condition check (Condit                                                                                                                        ionFileNotEmpty=/lib/modules/6.6.85-rt53-g6208e1d0d7b5/modules.devname).
[    7.238243] systemd[1]: Starting Load Kernel Module configfs...
         Starting Load Kernel Module configfs...
[    7.268511] systemd[1]: Starting Load Kernel Module drm...
         Starting Load Kernel Module drm...
[    7.292669] systemd[1]: Starting Load Kernel Module fuse...
         Starting Load Kernel Module fuse...
[    7.323504] systemd[1]: Starting RPC Bind...
         Starting RPC Bind...
[    7.345191] systemd[1]: File System Check on Root Device was skipped because of an unmet condition check (Conditio                                                                                                                        nPathIsReadWrite=!/).
[    7.364193] systemd[1]: Starting Journal Service...
         Starting Journal Service...
[    7.397818] systemd[1]: Starting Load Kernel Modules...
         Starting Load Kernel Modules...
[    7.413125] systemd[1]: Starting Generate network units from Kernel command line...
         Starting Generate network units[    7.424610] systemd[1]: Starting Remount Root and Kernel File Systems...
 from Kernel command line...
         Starting Remount Root and Kernel File[    7.449729] systemd[1]: Starting Create Static Device Nodes in /dev                                                                                                                         gracefully...
 Systems...
         Starting Create Static Device Nodes in /dev gracefully...
[    7.485834] systemd[1]: Starting Coldplug All udev Devices...
[    7.486927] sja1110: loading out-of-tree module taints kernel.
         Starting Coldplug All u[    7.504317] SPI driver sja1110 has no spi_device_id for nxp,sja1110-switch
dev Devices    7.512372] systemd-journald[123]: Collecting audit messages is disabled.
m[    7.512851] SPI driver sja1110 has no spi_device_id for nxp,sja1110-uc
[    7.526159] sja1110 spi5.0: probing uc

[    7.530472] EXT4-fs (mmcblk0p3): re-mounted 7998e1b8-8d1a-412f-8924-0a57aa6bfd99 r/w. Quota mode: disabled.
[    7.531358] sja1110 spi5.1: probing switch
[    7.545255] sja1110 spi5.1: Could not get GPIO from device tree
[    7.550995] sja1110 spi5.1: [sja1110_post_probe_upload_worker] Trying to initialize switch
[    7.561172] sja1110 spi5.1: [sja1110_init_hw] loaded fw 'sja1110_switch.bin'
[    7.566855] systemd[1]: Started RPC Bind.
[    7.568000] sja1110 spi5.1: [sja1110_pre_switch_upload] Found switch config of size 2236
[  OK      7.581351] systemd[1]: Mounted Huge Pages File System.
0m] [    7.586965] sja1110 spi5.1: Uploading config...
Started RPC Bind.
[  OK  ] Mounted Huge Pages File System.
[    7.612771] sja1110 spi5.1: Successfully configured!
[    7.617451] sja1110 spi5.0: [sja1110_post_probe_upload_worker] Trying to initialize uC
[    7.629290] systemd[1]: Mounted Kernel Debug File System.
[  OK  ] Mounted Kernel Debug File System.
[    7.640911] sja1110 spi5.0: [sja1110_init_hw] loaded fw 'sja1110_uc.bin'
[    7.647314] sja1110 spi5.0: [sja1110_pre_uc_upload] Found firmware of size 320280
[    7.654910] sja1110 spi5.0: [sja1110_pre_uc_upload] firmware appears to be valid
[    7.662311] sja1110 spi5.0: [sja1110_pre_uc_upload] µC not ready for download (Status=0x31)
[    7.670772] sja1110 spi5.0: Uploading firmware...
[    7.685877] systemd[1]: Started Journal Service.
[  OK  ] Started Journal Service.
[  OK  ] Finished Load Kernel Module configfs.
[  OK  ] Finished Load Kernel Module drm.
[  OK  ] Finished Load Kernel Module fuse.
[  OK  ] Finished Load Kernel Modules.
[  OK  ] Finished Generate network units from Kernel command line.
[  OK  ] Finished Remount Root and Kernel File Systems.
[  OK  ] Finished Create Static Device Nodes in /dev gracefully.
         Mounting FUSE Control File System...
         Mounting Kernel Configuration File System...
         Starting Flush Journal to Persistent Storage...
[    7.972916] random: crng init done
         Starting Apply Kernel Variables...
[    8.016530] systemd-journald[123]: Received client request to flush runtime journal.
         Starting Create Static Device Nodes in /dev...
[  OK  ] Mounted FUSE Control File System.
[  OK  ] Mounted Kernel Configuration File System.
[  OK  ] Finished Flush Journal to Persistent Storage.
[  OK  ] Finished Apply Kernel Variables.
[  OK  ] Finished Create Static Device Nodes in /dev.
[  OK  ] Reached target Preparation for Local File Systems.
         Mounting /tmp...
         Mounting /var/volatile...
         Starting Rule-based Manager for Device Events and Files...
[  OK  ] Finished Coldplug All udev Devices.
[  OK  ] Mounted /tmp.
[  OK  ] Mounted /var/volatile.
         Mounting /var/volatile/tmp...
         Starting Load/Save OS Random Seed...
[  OK  ] Mounted /var/volatile/tmp.
[  OK  ] Reached target Local File Systems.
         Starting Create System Files and Directories...
[  OK  ] Finished Load/Save OS Random Seed.
[    8.464743] sja1110 spi5.0: Upload successfully verified!
[  OK  ] Finished Create System Files and Directories.
         Starting Network Name Resolution...
         Starting Network Time Synchronization...
         Starting Record System Boot/Shutdown in UTMP...
[  OK  ] Started Rule-based Manager for Device Events and Files.
[    8.632624] s32cc-dwmac 4033c000.ethernet end0: renamed from eth0
[  OK  ] Finished Record System Boot/Shutdown in UTMP.
         Starting User Database Manager...
[  OK  ] Started User Database Manager.
[    9.244297] pfeng 46000000.pfe: PFEng ethernet driver loading ...
[    9.252915] pfeng 46000000.pfe: Version: 1.9.0
[    9.260084] pfeng 46000000.pfe: Driver commit hash: M4_DRIVER_COMMIT_HASH
[    9.266564] pfeng 46000000.pfe: Multi instance support: disabled (standalone)
[    9.266581] pfeng 46000000.pfe: Compiled by: 13.3.0
[    9.266632] pfeng 46000000.pfe: Cbus addr 0x46000000 size 0x1000000
 [    9.266650] pfeng 46000000.pfe: nxp,fw-class-name: s32g_pfe_class.fw
  [    9.266658] pfeng 46000000.pfe: nxp,fw-util-name: s32g_pfe_util.fw
 [    9.266918] pfeng 46000000.pfe: netif name: pfe0
 [    9.266932] pfeng 46000000.pfe: DT mac addr: 00:04:9f:be:ef:00
 [    9.266943] pfeng 46000000.pfe: netif(pfe0) linked phyif: 0
 [    9.266951] pfeng 46000000.pfe: netif(pfe0) mode: std
 [    9.267011] pfeng 46000000.pfe: netif(pfe0) HIFs: count 1 map 01
 [    9.267031] pfeng 46000000.pfe: EMAC0 interface mode: 4
S[    9.270984] pfeng 46000000.pfe: netif name: pfe1
ta[    9.335430] pfeng 46000000.pfe: DT mac addr: 00:04:9f:be:ef:01
rti[    9.341547] pfeng 46000000.pfe: netif(pfe1) linked phyif: 1
ng[    9.347216] pfeng 46000000.pfe: netif(pfe1) mode: std
     9.352662] pfeng 46000000.pfe: netif(pfe1) HIFs: count 1 map 02
;[    9.358739] pfeng 46000000.pfe: EMAC1 interface mode: 4
1;39m[    9.364334] pfeng 46000000.pfe: netif name: pfe2
Vi[    9.369098] pfeng 46000000.pfe: DT mac addr: 00:04:9f:be:ef:02
r[    9.375071] pfeng 46000000.pfe: netif(pfe2) linked phyif: 2
t[    9.380684] pfeng 46000000.pfe: netif(pfe2) mode: std
ual[    9.385977] pfeng 46000000.pfe: netif(pfe2) HIFs: count 1 map 04
 [    9.392054] pfeng 46000000.pfe: EMAC2 interface mode: 10
Co[    9.397498] pfeng 46000000.pfe: HIF channels mask: 0x0007
ns[    9.403050] pfeng 46000000.pfe: PFE port coherency enabled, mask 0x1e
ole [    9.409840] pfeng 46000000.pfe: Clocks: sys=300MHz pe=600MHz
Setup    9.416122] pfeng 46000000.pfe: Interface selected: EMAC0: 0x4 EMAC1: 0x4 EMAC2: 0xa
0m..[    9.424150] pfeng 46000000.pfe: PFE controller reset done
[    9.429809] pfeng 46000000.pfe: TX clock on EMAC0 for interface sgmii installed

[    9.437246] pfeng 46000000.pfe: RX clock on EMAC0 for interface sgmii installed
[    9.444563] pfeng 46000000.pfe: TX clock on EMAC1 for interface sgmii installed
[    9.451865] pfeng 46000000.pfe: RX clock on EMAC1 for interface sgmii installed
[    9.459218] pfeng 46000000.pfe: TX clock on EMAC2 for interface rgmii-id installed
[    9.469043] pfeng 46000000.pfe: RX clock on EMAC2 for interface rgmii-id installed
[    9.476507] pfeng 46000000.pfe: assigned reserved memory node pfebufs@34000000
[    9.483523] pfeng 46000000.pfe: assigned reserved memory node pfebufs@34080000
[    9.492011] pfeng 46000000.pfe: assigned reserved memory node pfebufs@83200000
[    9.498969] pfeng 46000000.pfe: assigned reserved memory node pfebufs@835e0000
[    9.513595] pfeng 46000000.pfe: Firmware: CLASS s32g_pfe_class.fw [45724 bytes]
[    9.522045] pfeng 46000000.pfe: Firmware: UTIL s32g_pfe_util.fw [23352 bytes]
[    9.528859] pfeng 46000000.pfe: PFE CBUS p0x46000000 mapped @ v0xffffffc082000000 (0x1000000 bytes)
[    9.537893] pfeng 46000000.pfe: Silicon S32G2
[    9.543285] pfeng 46000000.pfe: PFE_ERRORS:Parity instance created
[    9.549086] pfeng 46000000.pfe: PFE_ERRORS:Watchdog instance created
[    9.555530] pfeng 46000000.pfe: BMU1 buffer base: p0xc0000000
[    9.561240] pfeng 46000000.pfe: BMU2 buffer base: p0x34000000 (0x80000 bytes)
[    9.569674] pfeng 46000000.pfe: register IRQ 67 by name 'PFE BMU IRQ'
[    9.576138] pfeng 46000000.pfe: Firmware .elf detected
[    9.580991] pfeng 46000000.pfe: Uploading CLASS firmware
[    9.581128] pfeng 46000000.pfe: BMU_EMPTY_INT (BMU @ p0x0000000038e8d8ab). Pool ready.
[    9.586204] pfeng 46000000.pfe: Selected FW loading OPs to load 8 PEs in parallel
[    9.601560] pfeng 46000000.pfe: BMU_EMPTY_INT (BMU @ p0x00000000e32d7355). Pool ready.
[    9.605998] pfeng 46000000.pfe: pfe_ct.h file version"92367c0e25f21f49217a9b08168ad2c8"
[  OK  ] Started Network Time Synchronization.
[  OK  ] Reached target System Time Set.
[    9.632953] pfeng 46000000.pfe: [FW VERSION] 1.11.0, Build: Apr  8 2025, 21:02:36 (nogitaaa), ID: 0x31454650
[    9.642653] pfeng 46000000.pfe: EMAC timestamp external mode bitmap: 0
[    9.648914] pfeng 46000000.pfe: Uploading UTIL firmware
[    9.654086] pfeng 46000000.pfe: Selected FW loading OPs to load 1 PEs in parallel
[    9.656557] pfeng 46000000.pfe: pfe_ct.h file version"92367c0e25f21f49217a9b08168ad2c8"
[  OK  [    9.670747] pfeng 46000000.pfe: FW feature: drv_run_on_g3
 pfeng 46000000.pfe: FW feature: jumbo_frames
[[    9.676277] pfeng 46000000.pfe: FW feature: ptp_qos_mapping
0[    9.687251] pfeng 46000000.pfe: FW feature: software_vlan_table
m[    9.693238] pfeng 46000000.pfe: FW feature: timestamping
][    9.698619] pfeng 46000000.pfe: FW feature: qos_mapping
 [    9.703915] pfeng 46000000.pfe: FW feature: core_functionality
S[    9.709824] pfeng 46000000.pfe: FW feature: extended_features
t[    9.715632] pfeng 46000000.pfe: FW feature: flexible_router
a[    9.721303] pfeng 46000000.pfe: FW feature: validate_hif_csum
r[    9.727095] pfeng 46000000.pfe: FW feature: err051211_workaround
t[    9.733168] pfeng 46000000.pfe: FW feature: IPsec
e[    9.737938] pfeng 46000000.pfe: FW feature: l2_bridge_aging
d[    9.743583] pfeng 46000000.pfe: FW feature: receive_malformed
 [    9.749404] pfeng 46000000.pfe: FW feature: ptp_conf_check
 pfeng 46000000.pfe: FW feature: vlan_conf_check
[[    9.760599] pfeng 46000000.pfe: FW feature: hash_load_spread
0[    9.766359] pfeng 46000000.pfe: FW feature: ingress_vlan
;1[    9.771749] pfeng 46000000.pfe: FW feature: safety
;39mNetwork Name Resolution    9.779147] pfeng 46000000.pfe: VLAN ID incorrect or not set. Using default VLAN ID = 0x                                                                                                                        01.
m[    9.787608] pfeng 46000000.pfe: VLAN stats size incorrect or not set. Using default VLAN stats size = 20.
[    9.797332] pfeng 46000000.pfe: Software vlan hash table @ p0x20001288

[[    9.804081] pfeng 46000000.pfe: Fall-back bridge domain @ 0x20000a8c (class)
 pfeng 46000000.pfe: Default bridge domain @ 0x20000a84 (class)
[0;32m[    9.818623] pfeng 46000000.pfe: Routing table created, Hash Table @ p0x34080000, Pool @ p0x34088000 (65536 b                                                                                                                        ytes)
  OK[    9.829185] pfeng 46000000.pfe: Feature err051211_workaround: DISABLED
  ] Reached target Host and Network N[    9.840000] pfeng 46000000.pfe: HIF0 enabled
ame L[    9.844697] pfeng 46000000.pfe: HIF1 enabled
ooku[    9.849351] pfeng 46000000.pfe: HIF2 enabled
ps[    9.853688] pfeng 46000000.pfe: HIF3 not configured, skipped
 pfeng 46000000.pfe: MDIO bus 0 disabled: Not found in DT
[[    9.865882] pfeng 46000000.pfe: MDIO bus 1 disabled: Not found in DT
0m.
[    9.881058] pfeng 46000000.pfe: MDIO bus 2 enabled
[    9.885580] pfeng 46000000.pfe pfe0 (uninitialized): fixed link full duplex 2500Mbps not recognised
[    9.894487] phy-s32cc-serdes 44180000.serdes: Stable RX detected on XPCS0 after 0 µs
[[    9.902298] pfeng 46000000.pfe pfe0 (uninitialized): Subscribe to HIF0
 pfeng 46000000.pfe pfe0 (uninitialized): Host LLTX disabled
[0;[    9.915833] pfeng 46000000.pfe pfe0 (uninitialized): Enable HIF0
3[    9.921915] pfeng 46000000.pfe pfe0 (uninitialized): setting MAC addr: 00:04:9f:be:ef:00
2[    9.930083] pfeng 46000000.pfe pfe0 (uninitialized): PTP HW addend 0x80000000, max_adj configured to 46566128 ppb
m[    9.940401] pfeng 46000000.pfe: IEEE1588: Input Clock: 200000000Hz, Output: 100000000Hz, Accuracy: 10.0ns
  OK      9.950663] pfeng 46000000.pfe pfe0 (uninitialized): Registered PTP HW clock successfully on EMAC0
0m] Finished     9.960840] pfeng 46000000.pfe pfe0: registered
0;[    9.965604] phy-s32cc-serdes 44180000.serdes: Unstable RX detected on XPCS1
1[    9.972613] pfeng 46000000.pfe pfe1 (uninitialized): Subscribe to HIF1
;[    9.979197] pfeng 46000000.pfe pfe1 (uninitialized): Host LLTX disabled
39m[    9.986054] pfeng 46000000.pfe pfe1 (uninitialized): Enable HIF1
V[    9.992174] pfeng 46000000.pfe pfe1 (uninitialized): setting MAC addr: 00:04:9f:be:ef:01
i[   10.000317] pfeng 46000000.pfe pfe1 (uninitialized): PTP HW addend 0x80000000, max_adj configured to 46566128 ppb
r[   10.010630] pfeng 46000000.pfe: IEEE1588: Input Clock: 200000000Hz, Output: 100000000Hz, Accuracy: 10.0ns
tual Cons[   10.020918] pfeng 46000000.pfe pfe1 (uninitialized): Registered PTP HW clock successfully on EMAC1
ole Setup[   10.030658] pfeng 46000000.pfe pfe1: registered
   10.035325] pfeng 46000000.pfe pfe2 (uninitialized): Subscribe to HIF2
0[   10.041960] pfeng 46000000.pfe pfe2 (uninitialized): Host LLTX disabled
[   10.048833] pfeng 46000000.pfe pfe2 (uninitialized): Enable HIF2
[   10.054889] pfeng 46000000.pfe pfe2 (uninitialized): setting MAC addr: 00:04:9f:be:ef:02

[   10.063070] pfeng 46000000.pfe pfe2 (uninitialized): PTP HW addend 0x80000000, max_adj configured to 46566128 ppb
[   10.073284] pfeng 46000000.pfe: IEEE1588: Input Clock: 200000000Hz, Output: 100000000Hz, Accuracy: 10.0ns
[   10.083400] pfeng 46000000.pfe pfe2 (uninitialized): Registered PTP HW clock successfully on EMAC2
[   10.092565] pfeng 46000000.pfe pfe2: registered
[  OK  ] Reached target System Initialization.
[  OK  ] Started Daily rotation of log files.
[  OK  ] Started Daily Cleanup of Temporary Directories.
[  OK  ] Reached target Timer Units.
[  OK  ] Listening on D-Bus System Message Bus Socket.
         Starting sshd.socket...
[  OK  ] Listening on sshd.socket.
[  OK  ] Created slice Slice /system/systemd-fsck.
[  OK  ] Reached target Socket Units.
[  OK  ] Reached target Basic System.
[  OK  ] Started Job spooling tools.
[  OK  ] Started Periodic Command Scheduler.
         Starting D-Bus System Message Bus...
         Starting IPv6 Packet Filtering Framework...
         Starting IPv4 Packet Filtering Framework...
[  OK  ] Started irqbalance daemon.
[  OK  ] Started Hardware RNG Entropy Gatherer Daemon.
[  OK  ] Started System Logging Service.
         Starting Resets System Activity Logs...
         Starting File System Check on /dev/mmcblk0p2...
         Starting User Login Management...
         Starting OpenSSH Key Generation...
[  OK  ] Finished IPv6 Packet Filtering Framework.
[  OK  ] Finished IPv4 Packet Filtering Framework.
[  OK  ] Reached target Preparation for Network.
         Starting Network Configuration...
[  OK  ] Started D-Bus System Message Bus.
[  OK  ] Finished Resets System Activity Logs.
[  OK  ] Finished File System Check on /dev/mmcblk0p2.
         Mounting /run/media/boot_s32g2-mmcblk0p2...
[  OK  ] Started User Login Management.
[  OK  ] Finished OpenSSH Key Generation.
[  OK  ] Started Network Configuration.
[  OK  ] Mounted /run/media/boot_s32g2-mmcblk0p2.
[  OK  ] Reached target Network.
[  OK  ] Started Netperf Benchmark Server.
         Starting Permit User Sessions...
[  OK  ] Started Xinetd A Powerful Replacement For Inetd.
[  OK  ] Finished Permit User Sessions.
[  OK  ] Started Getty on tty1.
[  OK  ] Started Serial Getty on ttyLF0.
[  OK  ] Reached target Login Prompts.
[  OK  ] Reached target Multi-User System.
         Starting Record Runlevel Change in UTMP...
[  OK  ] Finished Record Runlevel Change in UTMP.

Auto Linux BSP 44.0 s32g274ardb2 ttyLF0

s32g274ardb2 login: root
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# ip addr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host noprefixroute
       valid_lft forever preferred_lft forever
2: can0: <NOARP,ECHO> mtu 16 qdisc noop state DOWN group default qlen 10
    link/can
3: can1: <NOARP,ECHO> mtu 16 qdisc noop state DOWN group default qlen 10
    link/can
4: teql0: <NOARP> mtu 1500 qdisc noop state DOWN group default qlen 100
    link/void
5: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000
    link/sit 0.0.0.0 brd 0.0.0.0
6: end0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 66:f0:c7:e4:f1:6b brd ff:ff:ff:ff:ff:ff
    inet6 fe80::64f0:c7ff:fee4:f16b/64 scope link proto kernel_ll
       valid_lft forever preferred_lft forever
7: pfe0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether 00:04:9f:be:ef:00 brd ff:ff:ff:ff:ff:ff
    inet6 fe80::204:9fff:febe:ef00/64 scope link proto kernel_ll
       valid_lft forever preferred_lft forever
8: pfe1: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN group default qlen 1000
    link/ether 00:04:9f:be:ef:01 brd ff:ff:ff:ff:ff:ff
9: pfe2: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN group default qlen 1000
    link/ether 00:04:9f:be:ef:02 brd ff:ff:ff:ff:ff:ff
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# # 'end0' 인터페이스의 모든 IPv4 주소를 제거합니다.
root@s32g274ardb2:~# ip addr flush dev end0
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# ip addr add 192.168.1.10/24 dev end0
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# ip link set dev end0 up
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# ip addr show dev end0
6: end0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
    link/ether 66:f0:c7:e4:f1:6b brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.10/24 scope global end0
       valid_lft forever preferred_lft forever
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# ping 192.168.1.11
PING 192.168.1.11 (192.168.1.11) 56(84) bytes of data.
From 192.168.1.10 icmp_seq=1 Destination Host Unreachable
From 192.168.1.10 icmp_seq=2 Destination Host Unreachable
From 192.168.1.10 icmp_seq=3 Destination Host Unreachable
From 192.168.1.10 icmp_seq=4 Destination Host Unreachable
From 192.168.1.10 icmp_seq=5 Destination Host Unreachable
From 192.168.1.10 icmp_seq=6 Destination Host Unreachable
From 192.168.1.10 icmp_seq=7 Destination Host Unreachable
From 192.168.1.10 icmp_seq=8 Destination Host Unreachable
From 192.168.1.10 icmp_seq=9 Destination Host Unreachable
From 192.168.1.10 icmp_seq=10 Destination Host Unreachable
From 192.168.1.10 icmp_seq=11 Destination Host Unreachable
From 192.168.1.10 icmp_seq=12 Destination Host Unreachable
From 192.168.1.10 icmp_seq=13 Destination Host Unreachable
From 192.168.1.10 icmp_seq=14 Destination Host Unreachable
From 192.168.1.10 icmp_seq=15 Destination Host Unreachable
From 192.168.1.10 icmp_seq=16 Destination Host Unreachable
From 192.168.1.10 icmp_seq=17 Destination Host Unreachable
From 192.168.1.10 icmp_seq=18 Destination Host Unreachable
From 192.168.1.10 icmp_seq=19 Destination Host Unreachable
From 192.168.1.10 icmp_seq=20 Destination Host Unreachable
From 192.168.1.10 icmp_seq=21 Destination Host Unreachable
From 192.168.1.10 icmp_seq=22 Destination Host Unreachable
From 192.168.1.10 icmp_seq=23 Destination Host Unreachable
From 192.168.1.10 icmp_seq=24 Destination Host Unreachable
From 192.168.1.10 icmp_seq=25 Destination Host Unreachable
From 192.168.1.10 icmp_seq=26 Destination Host Unreachable
From 192.168.1.10 icmp_seq=27 Destination Host Unreachable
From 192.168.1.10 icmp_seq=28 Destination Host Unreachable
From 192.168.1.10 icmp_seq=29 Destination Host Unreachable
From 192.168.1.10 icmp_seq=30 Destination Host Unreachable
From 192.168.1.10 icmp_seq=31 Destination Host Unreachable
From 192.168.1.10 icmp_seq=32 Destination Host Unreachable
From 192.168.1.10 icmp_seq=33 Destination Host Unreachable
From 192.168.1.10 icmp_seq=34 Destination Host Unreachable
From 192.168.1.10 icmp_seq=35 Destination Host Unreachable
From 192.168.1.10 icmp_seq=36 Destination Host Unreachable
From 192.168.1.10 icmp_seq=37 Destination Host Unreachable
From 192.168.1.10 icmp_seq=38 Destination Host Unreachable
From 192.168.1.10 icmp_seq=39 Destination Host Unreachable
From 192.168.1.10 icmp_seq=40 Destination Host Unreachable
From 192.168.1.10 icmp_seq=41 Destination Host Unreachable
From 192.168.1.10 icmp_seq=42 Destination Host Unreachable
From 192.168.1.10 icmp_seq=43 Destination Host Unreachable
From 192.168.1.10 icmp_seq=44 Destination Host Unreachable
From 192.168.1.10 icmp_seq=45 Destination Host Unreachable
From 192.168.1.10 icmp_seq=46 Destination Host Unreachable
From 192.168.1.10 icmp_seq=47 Destination Host Unreachable
From 192.168.1.10 icmp_seq=48 Destination Host Unreachable
^C
--- 192.168.1.11 ping statistics ---
50 packets transmitted, 0 received, +48 errors, 100% packet loss, time 50162ms
pipe 3
root@s32g274ardb2:~# ifconfig
end0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.10  netmask 255.255.255.0  broadcast 0.0.0.0
        ether 66:f0:c7:e4:f1:6b  txqueuelen 1000  (Ethernet)
        RX packets 24  bytes 8376 (8.1 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 68  bytes 5274 (5.1 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device interrupt 54  base 0x2000

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 58  bytes 6208 (6.0 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 58  bytes 6208 (6.0 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

pfe0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet6 fe80::204:9fff:febe:ef00  prefixlen 64  scopeid 0x20<link>
        ether 00:04:9f:be:ef:00  txqueuelen 1000  (Ethernet)
        RX packets 6  bytes 2016 (1.9 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 19  bytes 3490 (3.4 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device memory 0x46000000-46ffffff

pfe1: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        ether 00:04:9f:be:ef:01  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device memory 0x46000000-46ffffff

pfe2: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        ether 00:04:9f:be:ef:02  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
        device memory 0x46000000-46ffffff

root@s32g274ardb2:~# ping 192.168.1.11
PING 192.168.1.11 (192.168.1.11) 56(84) bytes of data.
64 bytes from 192.168.1.11: icmp_seq=1 ttl=64 time=0.597 ms
64 bytes from 192.168.1.11: icmp_seq=2 ttl=64 time=0.240 ms
64 bytes from 192.168.1.11: icmp_seq=3 ttl=64 time=0.211 ms
64 bytes from 192.168.1.11: icmp_seq=4 ttl=64 time=0.168 ms
64 bytes from 192.168.1.11: icmp_seq=5 ttl=64 time=0.169 ms
64 bytes from 192.168.1.11: icmp_seq=6 ttl=64 time=0.170 ms
64 bytes from 192.168.1.11: icmp_seq=7 ttl=64 time=0.166 ms
64 bytes from 192.168.1.11: icmp_seq=8 ttl=64 time=0.175 ms
64 bytes from 192.168.1.11: icmp_seq=9 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=10 ttl=64 time=0.192 ms
64 bytes from 192.168.1.11: icmp_seq=11 ttl=64 time=0.177 ms
64 bytes from 192.168.1.11: icmp_seq=12 ttl=64 time=0.178 ms
64 bytes from 192.168.1.11: icmp_seq=13 ttl=64 time=0.172 ms
64 bytes from 192.168.1.11: icmp_seq=14 ttl=64 time=0.173 ms
64 bytes from 192.168.1.11: icmp_seq=15 ttl=64 time=0.168 ms
64 bytes from 192.168.1.11: icmp_seq=16 ttl=64 time=0.202 ms
64 bytes from 192.168.1.11: icmp_seq=17 ttl=64 time=0.171 ms
64 bytes from 192.168.1.11: icmp_seq=18 ttl=64 time=0.173 ms
64 bytes from 192.168.1.11: icmp_seq=19 ttl=64 time=0.175 ms
64 bytes from 192.168.1.11: icmp_seq=20 ttl=64 time=0.182 ms
64 bytes from 192.168.1.11: icmp_seq=21 ttl=64 time=0.166 ms
64 bytes from 192.168.1.11: icmp_seq=22 ttl=64 time=0.173 ms
64 bytes from 192.168.1.11: icmp_seq=23 ttl=64 time=0.170 ms
64 bytes from 192.168.1.11: icmp_seq=24 ttl=64 time=0.176 ms
64 bytes from 192.168.1.11: icmp_seq=25 ttl=64 time=0.166 ms
64 bytes from 192.168.1.11: icmp_seq=26 ttl=64 time=0.165 ms
64 bytes from 192.168.1.11: icmp_seq=27 ttl=64 time=0.167 ms
64 bytes from 192.168.1.11: icmp_seq=28 ttl=64 time=0.220 ms
64 bytes from 192.168.1.11: icmp_seq=29 ttl=64 time=0.181 ms
64 bytes from 192.168.1.11: icmp_seq=30 ttl=64 time=0.179 ms
64 bytes from 192.168.1.11: icmp_seq=31 ttl=64 time=0.170 ms
64 bytes from 192.168.1.11: icmp_seq=32 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=33 ttl=64 time=0.180 ms
64 bytes from 192.168.1.11: icmp_seq=34 ttl=64 time=0.182 ms
64 bytes from 192.168.1.11: icmp_seq=35 ttl=64 time=0.167 ms
64 bytes from 192.168.1.11: icmp_seq=36 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=37 ttl=64 time=0.166 ms
64 bytes from 192.168.1.11: icmp_seq=38 ttl=64 time=0.169 ms
64 bytes from 192.168.1.11: icmp_seq=39 ttl=64 time=0.175 ms
64 bytes from 192.168.1.11: icmp_seq=40 ttl=64 time=0.168 ms
64 bytes from 192.168.1.11: icmp_seq=41 ttl=64 time=0.172 ms
64 bytes from 192.168.1.11: icmp_seq=42 ttl=64 time=0.169 ms
64 bytes from 192.168.1.11: icmp_seq=43 ttl=64 time=0.171 ms
64 bytes from 192.168.1.11: icmp_seq=44 ttl=64 time=0.169 ms
64 bytes from 192.168.1.11: icmp_seq=45 ttl=64 time=0.170 ms
64 bytes from 192.168.1.11: icmp_seq=46 ttl=64 time=0.171 ms
64 bytes from 192.168.1.11: icmp_seq=47 ttl=64 time=0.169 ms
64 bytes from 192.168.1.11: icmp_seq=48 ttl=64 time=0.164 ms
64 bytes from 192.168.1.11: icmp_seq=49 ttl=64 time=0.180 ms
64 bytes from 192.168.1.11: icmp_seq=50 ttl=64 time=0.168 ms
64 bytes from 192.168.1.11: icmp_seq=51 ttl=64 time=0.173 ms
64 bytes from 192.168.1.11: icmp_seq=52 ttl=64 time=0.173 ms
64 bytes from 192.168.1.11: icmp_seq=53 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=54 ttl=64 time=0.176 ms
64 bytes from 192.168.1.11: icmp_seq=55 ttl=64 time=0.173 ms
64 bytes from 192.168.1.11: icmp_seq=56 ttl=64 time=0.172 ms
64 bytes from 192.168.1.11: icmp_seq=57 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=58 ttl=64 time=0.170 ms
64 bytes from 192.168.1.11: icmp_seq=59 ttl=64 time=0.181 ms
64 bytes from 192.168.1.11: icmp_seq=60 ttl=64 time=0.172 ms
64 bytes from 192.168.1.11: icmp_seq=61 ttl=64 time=0.175 ms
64 bytes from 192.168.1.11: icmp_seq=62 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=63 ttl=64 time=0.175 ms
64 bytes from 192.168.1.11: icmp_seq=64 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=65 ttl=64 time=0.178 ms
64 bytes from 192.168.1.11: icmp_seq=66 ttl=64 time=0.168 ms
64 bytes from 192.168.1.11: icmp_seq=67 ttl=64 time=0.178 ms
64 bytes from 192.168.1.11: icmp_seq=68 ttl=64 time=0.179 ms
64 bytes from 192.168.1.11: icmp_seq=69 ttl=64 time=0.176 ms
64 bytes from 192.168.1.11: icmp_seq=70 ttl=64 time=0.174 ms
64 bytes from 192.168.1.11: icmp_seq=71 ttl=64 time=0.170 ms
64 bytes from 192.168.1.11: icmp_seq=72 ttl=64 time=0.169 ms
64 bytes from 192.168.1.11: icmp_seq=73 ttl=64 time=0.171 ms
64 bytes from 192.168.1.11: icmp_seq=74 ttl=64 time=0.169 ms
64 bytes from 192.168.1.11: icmp_seq=75 ttl=64 time=0.170 ms
64 bytes from 192.168.1.11: icmp_seq=76 ttl=64 time=0.203 ms
64 bytes from 192.168.1.11: icmp_seq=77 ttl=64 time=0.181 ms
64 bytes from 192.168.1.11: icmp_seq=78 ttl=64 time=0.214 ms
64 bytes from 192.168.1.11: icmp_seq=79 ttl=64 time=0.168 ms
64 bytes from 192.168.1.11: icmp_seq=80 ttl=64 time=0.223 ms
64 bytes from 192.168.1.11: icmp_seq=81 ttl=64 time=0.177 ms
^C
--- 192.168.1.11 ping statistics ---
81 packets transmitted, 81 received, 0% packet loss, time 81928ms
rtt min/avg/max/mdev = 0.164/0.181/0.597/0.048 ms
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
 -m: 메시지 출력2:~# # -i: 인터페이스, -s: 슬레이브 모드, -H: 하드웨어 타임스탬핑, -2: L2 전송,
root@s32g274ardb2:~# ptp4l -i end0 -s -H -2 -m
ptp4l[331.280]: selected /dev/ptp3 as PTP clock
ptp4l[331.320]: port 1 (end0): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[331.320]: port 0 (/var/run/ptp4l): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[331.321]: port 0 (/var/run/ptp4lro): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[337.648]: selected local clock 66f0c7.fffe.e4f16b as best master
^Croot@s32g274ardb2:~# ptp4l -i end0 -s -H -2 -m
ptp4l[440.104]: selected /dev/ptp3 as PTP clock
ptp4l[440.148]: port 1 (end0): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[440.148]: port 0 (/var/run/ptp4l): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[440.149]: port 0 (/var/run/ptp4lro): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[448.120]: selected local clock 66f0c7.fffe.e4f16b as best master
^Croot@s32g274ardb2:~# ptp4l -i end0 -s -H -2 -m
ptp4l[544.804]: selected /dev/ptp3 as PTP clock
ptp4l[544.844]: port 1 (end0): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[544.844]: port 0 (/var/run/ptp4l): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[544.845]: port 0 (/var/run/ptp4lro): INITIALIZING to LISTENING on INIT_COMPLETE
ptp4l[552.331]: selected local clock 66f0c7.fffe.e4f16b as best master
# S32G2 보드 터미널에서 실행
ethtool -T end0
^Croot@s32g274ardb2:~# ^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# ethtool -T end0
Time stamping parameters for end0:
Capabilities:
        hardware-transmit
        software-transmit
        hardware-receive
        software-receive
        software-system-clock
        hardware-raw-clock
PTP Hardware Clock: 3
Hardware Transmit Timestamp Modes:
        off
        on
Hardware Receive Filter Modes:
        none
        all
        ptpv1-l4-event
        ptpv1-l4-sync
        ptpv1-l4-delay-req
        ptpv2-l4-event
        ptpv2-l4-sync
        ptpv2-l4-delay-req
        ptpv2-event
        ptpv2-sync
        ptpv2-delay-req
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# tc qdisc replace dev end0 root handle 1: mqprio \
>     hw 0 num_tc 5 \
>     map 1 1 2 3 4 \
>     queues 1@0 1@1 1@2 1@3 1@4
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# tc qdisc replace dev end0 parent 1:2 cbs \
>     idleslope 67000 sendslope -933000 \
>     hicredit 2147483647 locredit -2147483648 offload 1
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# iperf3 -c 192.168.1.11 -u -b 100M -t 20 --tos 0x80
Connecting to host 192.168.1.11, port 5201
[  5] local 192.168.1.10 port 60169 connected to 192.168.1.11 port 5201
[ ID] Interval           Transfer     Bitrate         Total Datagrams
[  5]   0.00-1.00   sec  7.82 MBytes  65.6 Mbits/sec  5667
[  5]   1.00-2.00   sec  7.70 MBytes  64.6 Mbits/sec  5579
[  5]   2.00-3.00   sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]   3.00-4.00   sec  7.73 MBytes  64.9 Mbits/sec  5600
[  5]   4.00-5.00   sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]   5.00-6.00   sec  7.66 MBytes  64.3 Mbits/sec  5548
[  5]   6.00-7.00   sec  7.73 MBytes  64.9 Mbits/sec  5600
[  5]   7.00-8.00   sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]   8.00-9.00   sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]   9.00-10.00  sec  7.73 MBytes  64.9 Mbits/sec  5600
[  5]  10.00-11.00  sec  7.66 MBytes  64.3 Mbits/sec  5549
[  5]  11.00-12.00  sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]  12.00-13.00  sec  7.73 MBytes  64.9 Mbits/sec  5600
[  5]  13.00-14.00  sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]  14.00-15.00  sec  7.73 MBytes  64.9 Mbits/sec  5600
[  5]  15.00-16.00  sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]  16.00-17.00  sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]  17.00-18.00  sec  7.73 MBytes  64.9 Mbits/sec  5600
[  5]  18.00-19.00  sec  7.66 MBytes  64.3 Mbits/sec  5550
[  5]  19.00-20.01  sec  7.67 MBytes  63.6 Mbits/sec  5550
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bitrate         Jitter    Lost/Total Datagrams
[  5]   0.00-20.01  sec   154 MBytes  64.5 Mbits/sec  0.000 ms  0/111443 (0%)  sender
[  5]   0.00-20.01  sec   154 MBytes  64.5 Mbits/sec  0.192 ms  0/111443 (0%)  receiver

iperf Done.
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > cbs_benchmark_all.sh
> #!/bin/bash
>
> # --- 설정 변수 ---
> IFACE="end0"
> PARTNER_PC_IP="192.168.1.11"
> LINK_SPEED_BPS=1000000000    # 1Gbps
> LOG_FILE="cbs_benchmark_results.csv" # CSV 형식으로 결과 저장
> TOS_VALUE=0x80 # CBS가 적용될 큐로 보내기 위한 ToS 값
>
> # 테스트할 대역폭 비 (%)  목
> # 1Gbps의 80%, 50%, 20%, 10%, 5% (이미지의 100%는 실제 링크 속도이므로 제외)
> BANDWIDTH_PERCENTAGES=(80 50 20 10 5)
>
> # --- 함수 정의 ---
> function setup_cbs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "Setting CBS: idleslope=${idleslope_bps}bps"
>     # /dev/null 2>&1 : 표준 출력과 표준 에러를 모두 버림 (화면을 깔끔하게 유지)
>     tc qdisc replace dev ${IFACE} root handle 1: mqprio hw 0 num_tc 5 map 1 1 2 3 4 queues 1@0 1@1 1@2 1@3 1@4 > /d                                                                                                                        ev/null 2>&1
>     tc qdisc replace dev ${IFACE} parent 1:2 cbs \
>         idleslope ${idleslope_bps} sendslope ${sendslope_bps} \
>         hicredit 2147483647 locredit -2147483648 offload 1
> }
>
> function clear_cbs() {
>     echo "Clearing CBS rules from ${IFACE}..."
>     tc qdisc del dev ${IFACE} root > /dev/null 2>&1
> }
>
> # --- 메인 실행 로직 ---
> #  연산
> function integer_calc() {
>     awk "BEGIN {print int($1)}"
> }
>
> # CSV 헤더 생성
> echo "Target_Percentage,Target_Mbps,Measured_Mbps" > ${LOG_FILE}
> trap clear_cbs EXIT # 스크립트 종료 시 규칙 정리
>
> # 파트너 PC에서 iperf3 서버 실행 확인
> echo "====================================================="
> echo "Please ensure iperf3 server is running on ${PARTNER_PC_IP}"
> echo "Starting benchmark in 5 seconds..."
> echo "====================================================="
> sleep 5
>
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     # 목표 대역폭 계산 (bps) - 셸 산술 연산 사용
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # 요청 대역폭은 목표보다 50Mbps 크게 설정
>     request_mbps=$((target_mbps + 50))
>
>     echo
>     echo "[TEST] Limiting bandwidth to ${percent}% (${target_mbps} Mbps)"
>
>     # 1. CBS 설정
>     setup_cbs ${target_bps}
>
>     # 2. iperf3 실행 및 결과 파싱
>     # iperf3 결과를 변수에 저장하고, 그 중 'sender' 라인의 6번째 필드(Bitrate)만 추출
>     echo "  -> Running iperf3 test..."
>     result_line=$(iperf3 -c ${PARTNER_PC_IP} -u -b ${request_mbps}M -t 10 --tos ${TOS_VALUE} | grep "sender")
>     measured_mbps=$(echo ${result_line} | awk '{print $7}')
>
>     if [ -z "${measured_mbps}" ]; then
>         echo "  -> FAILED to get iperf3 result. Skipping."
>         measured_mbps="N/A"
>     else
>         echo "  -> Measured: ${measured_mbps} Mbits/sec"
>     fi
>
>     # 3. CSV 파일에 결과 기록
>     echo "${percent},${target_mbps},${measured_mbps}" >> ${LOG_FILE}
>
>     sleep 2
> done
>
> clear_cbs
> echo
> echo "====================================================="
> echo "Benchmark finished. Results saved to ${LOG_FILE}:"
> echo "====================================================="
> cat ${LOG_FILE}
> EOF
root@s32g274ardb2:~#
# 스크립트 실행 권한 부여
chmod +x cbs_benchmark_all.sh

# 스크립트 실행
./cbs_benchmark_all.shroot@s32g274ardb2:~# # 스크립트 실행 권한 부여
root@s32g274ardb2:~# chmod +x cbs_benchmark_all.sh
root@s32g274ardb2:~#
root@s32g274ardb2:~# # 스크립트 실행
root@s32g274ardb2:~# ./cbs_benchmark_all.sh
=====================================================
Please ensure iperf3 server is running on 192.168.1.11
Starting benchmark in 5 seconds...
=====================================================

[TEST] Limiting bandwidth to 80% (800 Mbps)
Setting CBS: idleslope=800000000bps
Error: Specified device failed to setup cbs hardware offload.
  -> Running iperf3 test...
  -> Measured: 64.5 Mbits/sec

[TEST] Limiting bandwidth to 50% (500 Mbps)
Setting CBS: idleslope=500000000bps
Error: Specified device failed to setup cbs hardware offload.
  -> Running iperf3 test...
  -> Measured: 64.6 Mbits/sec

[TEST] Limiting bandwidth to 20% (200 Mbps)
Setting CBS: idleslope=200000000bps
Error: Specified device failed to setup cbs hardware offload.
  -> Running iperf3 test...
  -> Measured: 64.6 Mbits/sec

[TEST] Limiting bandwidth to 10% (100 Mbps)
Setting CBS: idleslope=100000000bps
Error: Specified device failed to setup cbs hardware offload.
  -> Running iperf3 test...
  -> Measured: 64.6 Mbits/sec

[TEST] Limiting bandwidth to 5% (50 Mbps)
Setting CBS: idleslope=50000000bps
Error: Specified device failed to setup cbs hardware offload.
  -> Running iperf3 test...
^Ciperf3: interrupt - the client has terminated
Clearing CBS rules from end0...

root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > cbs_benchmark_all.sh
> #!/bin/bash
>
> # --- 설정 변수 ---
> IFACE="end0"
> PARTNER_PC_IP="192.168.1.11"
> LINK_SPEED_BPS=1000000000
> LOG_FILE="cbs_benchmark_results.csv"
> TOS_VALUE=0x80
>
> # 테스트할 대역폭 비율 목록 (%)
> BANDWIDTH_PERCENTAGES=(80 50 20 10 5)
>
> # --- 함수 정의 ---
> function setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "Setting up Qdiscs for idleslope=${idleslope_bps}bps..."
>
>     # 1. MQPRIO qdisc 추가 (handle 1:)
>     tc qdisc add dev ${IFACE} root handle 1: mqprio \
>         hw 0 num_tc 5 \
>         map 1 1 2 3 4 \
>         queues 1@0 1@1 1@2 1@3 1@4
>
>     # 2. CBS qdisc 추가 (parent 1:2)
>     tc qdisc add dev ${IFACE} parent 1:2 cbs \
>         idleslope ${idleslope_bps} sendslope ${sendslope_bps} \
>         hicredit 2147483647 locredit -2147483648 offload 1
>
>     # 설정이 성공했는지 확인
>     if [ $? -ne 0 ]; then
>         echo "Error: Failed to setup CBS. Check tc commands."
>         return 1
>     fi
>     return 0
> }
>
> function clear_qdiscs() {
>     echo "Clearing all qdiscs from ${IFACE}..."
>     # 에러를 무시하고 조용히 실행
>     tc qdisc del dev ${IFACE} root > /dev/null 2>&1
> }
>
> # --- 메인 실행 로직 ---
> # 스크립트 시작 시 및 종료 시 항상 규칙 정리
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> echo "Target_Percentage,Target_Mbps,Measured_Mbps" > ${LOG_FILE}
>
> echo "====================================================="
> echo "Please ensure iperf3 server is running on ${PARTNER_PC_IP}"
> echo "Starting benchmark in 3 seconds..."
> echo "====================================================="
> sleep 3
>
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>     request_mbps=$((target_mbps + 50))
>
>     echo
>     echo "[TEST] Target: ${percent}% (${target_mbps} Mbps)"
>
>     # 1. 이전 규칙 삭제 및 새 규칙 설정
>     clear_qdiscs
>     sleep 1 # 규칙이 완전히 정리될 시간을 줌
>
>     setup_qdiscs ${target_bps}
>     if [ $? -ne 0 ]; then
>         echo "  -> SKIPPING test due to setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP" >> ${LOG_FILE}
>         continue
>     fi
>
>     # 2. iperf3 실행
>     echo "  -> Running iperf3 test..."
>     result_line=$(iperf3 -c ${PARTNER_PC_IP} -u -b ${request_mbps}M -t 10 --tos ${TOS_VALUE} | grep "sender")
>     measured_mbps=$(echo ${result_line} | awk '{print $7}')
>
>     if [ -z "${measured_mbps}" ]; then
>         echo "  -> FAILED to get iperf3 result."
>         measured_mbps="N/A"
>     else
>         echo "  -> Measured: ${measured_mbps} Mbits/sec"
>     fi
>
>     # 3. 결과 기록
>     echo "${percent},${target_mbps},${measured_mbps}" >> ${LOG_FILE}
> done
>
> echo
> echo "====================================================="
> echo "Benchmark finished. Results saved to ${LOG_FILE}:"
> echo "====================================================="
> cat ${LOG_FILE}
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# # 스크립트 실행 권한 부여 및 실행
root@s32g274ardb2:~# chmod +x cbs_benchmark_all.sh && ./cbs_benchmark_all.sh
Clearing all qdiscs from end0...
=====================================================
Please ensure iperf3 server is running on 192.168.1.11
Starting benchmark in 3 seconds...
=====================================================

[TEST] Target: 80% (800 Mbps)
Clearing all qdiscs from end0...
Setting up Qdiscs for idleslope=800000000bps...
Error: Specified device failed to setup cbs hardware offload.
Error: Failed to setup CBS. Check tc commands.
  -> SKIPPING test due to setup failure.

[TEST] Target: 50% (500 Mbps)
Clearing all qdiscs from end0...
Setting up Qdiscs for idleslope=500000000bps...
Error: Specified device failed to setup cbs hardware offload.
Error: Failed to setup CBS. Check tc commands.
  -> SKIPPING test due to setup failure.

[TEST] Target: 20% (200 Mbps)
Clearing all qdiscs from end0...
Setting up Qdiscs for idleslope=200000000bps...
Error: Specified device failed to setup cbs hardware offload.
Error: Failed to setup CBS. Check tc commands.
  -> SKIPPING test due to setup failure.

[TEST] Target: 10% (100 Mbps)
Clearing all qdiscs from end0...
Setting up Qdiscs for idleslope=100000000bps...
Error: Specified device failed to setup cbs hardware offload.
Error: Failed to setup CBS. Check tc commands.
  -> SKIPPING test due to setup failure.

[TEST] Target: 5% (50 Mbps)
Clearing all qdiscs from end0...
Setting up Qdiscs for idleslope=50000000bps...
Error: Specified device failed to setup cbs hardware offload.
Error: Failed to setup CBS. Check tc commands.
  -> SKIPPING test due to setup failure.

=====================================================
Benchmark finished. Results saved to cbs_benchmark_results.csv:
=====================================================
Target_Percentage,Target_Mbps,Measured_Mbps
80,800,FAILED_SETUP
50,500,FAILED_SETUP
20,200,FAILED_SETUP
10,100,FAILED_SETUP
5,50,FAILED_SETUP
Clearing all qdiscs from end0...
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# tc qdisc add dev end0 root handle 1: mqprio \
>     hw 0 num_tc 5 \
>     map 1 1 2 3 4 \
>     queues 1@0 1@1 1@2 1@3 1@4
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# tc qdisc add dev end0 parent 1:2 cbs \
>     idleslope 67000 sendslope -933000 \
>     hicredit 2147483647 locredit -2147483648 offload 1
root@s32g274ardb2:~# tc qdisc del dev end0 root
root@s32g274ardb2:~# # idleslope = 100,000,000 bps
root@s32g274ardb2:~# # sendslope = 100,000,000 - 1,000,000,000 = -900,000,000
root@s32g274ardb2:~# tc qdisc add dev end0 parent 1:2 cbs \
>     idleslope 100000000 sendslope -900000000 \
>     hicredit 2147483647 locredit -2147483648 offload 1
Error: Failed to find specified qdisc.
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# tc qdisc del dev end0 root
Error: Cannot delete qdisc with handle of zero.
root@s32g274ardb2:~#
root@s32g274ardb2:~# tc qdisc add dev end0 root handle 1: mqprio \
>     hw 0 num_tc 5 \
>     map 1 1 2 3 4 \
>     queues 1@0 1@1 1@2 1@3 1@4
root@s32g274ardb2:~# tc qdisc add dev end0 parent 1:2 cbs \
>     idleslope 100000000 sendslope -900000000 \
>     hicredit 2147483647 locredit -2147483648 offload 1
Error: Specified device failed to setup cbs hardware offload.
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# tc qdisc add dev end0 root handle 1: mqprio hw 0 num_tc 5 map 1 1 2 3 4 queues 1@0 1@1 1@2 1@3 1                                                                                                                        @4
Error: Exclusivity flag on, cannot modify.
root@s32g274ardb2:~# # idleslope = 64,000,000 bps
root@s32g274ardb2:~# # sendslope = 64,000,000 - 1,000,000,000 = -936,000,000
root@s32g274ardb2:~# tc qdisc add dev end0 parent 1:2 cbs \
>     idleslope 64000000 sendslope -936000000 \
>     hicredit 2147483647 locredit -2147483648 offload 1
Error: Specified device failed to setup cbs hardware offload.
root@s32g274ardb2:~# tc qdisc add dev end0 parent 1:2 cbs \
>     idleslope 100000000 sendslope -900000000 \
>     hicredit 2147483647 locredit -2147483648
root@s32g274ardb2:~# tc qdisc add dev end0 parent 1:2 cbs \
>     idleslope 100000000 sendslope -900000000 offload 1
Error: Exclusivity flag on, cannot modify.
root@s32g274ardb2:~# tc qdisc del dev end0 root
root@s32g274ardb2:~#
root@s32g274ardb2:~# tc qdisc add dev end0 root handle 1: mqprio hw 0 num_tc 5 map 1 1 2 3 4 queues 1@0 1@1 1@2 1@3 1                                                                                                                        @4
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# tc qdisc add dev end0 parent 1:2 cbs \
>     idleslope 100000000 sendslope -900000000
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# cat << 'EOF' > cbs_benchmark_final.sh
> #!/bin/bash
>
> # --- 설정 변수 ---
> IFACE="end0"
> PARTNER_PC_IP="192.168.1.11"
> LINK_SPEED_BPS=1000000000
> LOG_FILE="cbs_benchmark_results_sw.csv" # 소프트웨어 방식 결과 파일
> TOS_VALUE=0x80
>
> # 테스트할 대역폭 비율 목록 (%)
> BANDWIDTH_PERCENTAGES=(80 50 20 10 5)
>
> # --- 함수 정의 ---
> function setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "Setting up Qdiscs (Software CBS) for idleslope=${idleslope_bps}bps..."
>
>     # 1. MQPRIO qdisc 추가
>     tc qdisc add dev ${IFACE} root handle 1: mqprio \
>         hw 0 num_tc 5 \
>         map 1 1 2 3 4 \
>         queues 1@0 1@1 1@2 1@3 1@4
>
>     # 2. CBS qdisc 추가 (offload 옵션 제거)
>     tc qdisc add dev ${IFACE} parent 1:2 cbs \
>         idleslope ${idleslope_bps} sendslope ${sendslope_bps}
>
>     if [ $? -ne 0 ]; then
>         echo "Error: Failed to setup CBS. Exiting."
>         exit 1
>     fi
> }
>
> function clear_qdiscs() {
>  기존 규칙 삭제
>     tc qdisc del dev ${IFACE} root > /dev/null 2>&1
> }
>
> # --- 메인 실행 로직 ---
> # 스크립트 시작 및 종료 시 규칙 정리
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> echo "Target_Percentage(%),Target_Mbps,Measured_Mbps" > ${LOG_FILE}
>
> echo "====================================================="
> echo "CBS Benchmark (Software Mode)"
> echo "Please ensure iperf3 server is running on ${PARTNER_PC_IP}"
> echo "Starting in 3 seconds..."
> echo "====================================================="
> sleep 3
>
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>     request_mbps=$((target_mbps + 50))
>
>     echo
>     echo "[TEST] Target: ${percent}% (${target_mbps} Mbps)"
>
>     # 1. 이전 규칙 삭제 및 새 규칙 설정
>     clear_qdiscs
>     sleep 1 # 드라이버 상태 정리 대기
>     setup_qdiscs ${target_bps}
>
>     # 2. iperf3 실행
>     echo "  -> Running iperf3 test..."
>     result_line=$(iperf3 -c ${PARTNER_PC_IP} -u -b ${request_mbps}M -t 10 --tos ${TOS_VALUE} | grep "sender")
>     measured_mbps=$(echo ${result_line} | awk '{print $7}')
>
>     if [ -z "${measured_mbps}" ]; then
>         echo "  -> FAILED to get iperf3 result."
>         measured_mbps="N/A"
>     else
>         echo "  -> Measured: ${measured_mbps} Mbits/sec"
>     fi
>
>     # 3. 결과 기록
>     echo "${percent},${target_mbps},${measured_mbps}" >> ${LOG_FILE}
> done
>
> echo
> echo "====================================================="
> echo "Benchmark finished. Results saved to ${LOG_FILE}:"
> echo "====================================================="
> cat ${LOG_FILE}
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# # 스크립트 실행 권한 부여 및 실행
root@s32g274ardb2:~# chmod +x cbs_benchmark_final.sh && ./cbs_benchmark_final.sh
./cbs_benchmark_final.sh: line 37: $'\352\270\260\354\241\264': command not found
=====================================================
CBS Benchmark (Software Mode)
Please ensure iperf3 server is running on 192.168.1.11
Starting in 3 seconds...
=====================================================

[TEST] Target: 80% (800 Mbps)
./cbs_benchmark_final.sh: line 37: $'\352\270\260\354\241\264': command not found
Setting up Qdiscs (Software CBS) for idleslope=800000000bps...
  -> Running iperf3 test...
  -> Measured: 552 Mbits/sec

[TEST] Target: 50% (500 Mbps)
./cbs_benchmark_final.sh: line 37: $'\352\270\260\354\241\264': command not found
Setting up Qdiscs (Software CBS) for idleslope=500000000bps...
  -> Running iperf3 test...
  -> Measured: 525 Mbits/sec

[TEST] Target: 20% (200 Mbps)
./cbs_benchmark_final.sh: line 37: $'\352\270\260\354\241\264': command not found
Setting up Qdiscs (Software CBS) for idleslope=200000000bps...
  -> Running iperf3 test...
  -> Measured: 250 Mbits/sec

[TEST] Target: 10% (100 Mbps)
./cbs_benchmark_final.sh: line 37: $'\352\270\260\354\241\264': command not found
Setting up Qdiscs (Software CBS) for idleslope=100000000bps...
  -> Running iperf3 test...
  -> Measured: 150 Mbits/sec

[TEST] Target: 5% (50 Mbps)
./cbs_benchmark_final.sh: line 37: $'\352\270\260\354\241\264': command not found
Setting up Qdiscs (Software CBS) for idleslope=50000000bps...
  -> Running iperf3 test...
  -> Measured: 100 Mbits/sec

=====================================================
Benchmark finished. Results saved to cbs_benchmark_results_sw.csv:
=====================================================
Target_Percentage(%),Target_Mbps,Measured_Mbps
80,800,552
50,500,525
20,200,250
10,100,150
5,50,100
./cbs_benchmark_final.sh: line 37: $'\352\270\260\354\241\264': command not found
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > cbs_benchmark_graph.sh
> #!/bin/bash
>
> IFACE="end0"
> PARTNER_PC_IP="192.168.1.11"
> LINK_SPEED_BPS=1000000000
> TOS_VALUE=0x80
> RESULTS_DIR="benchmark_results_$(date +%F_%H-%M-%S)"
> SUMMARY_CSV="${RESULTS_DIR}/summary.csv"
>
> BANDWIDTH_PERCENTAGES=(80 50 20 10 5)
>
> # --- Functions ---
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "Setting up Qdiscs (HW Offload) for idleslope=${idleslope_bps}bps..."
>
>     tc qdisc add dev ${IFACE} root handle 1: mqprio \
>         hw 0 num_tc 5 map 1 1 2 3 4 queues 1@0 1@1 1@2 1@3 1@4
>
>     # hicredit, locredit 제거, offload 1 재시도
>     tc qdisc add dev ${IFACE} parent 1:2 cbs \
>         idleslope ${idleslope_bps} sendslope ${sendslope_bps} offload 1
>
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to setup CBS with HW offload."
>         return 1
>     fi
>     return 0
> }
>
> clear_qdiscs() {
>     tc qdisc del dev ${IFACE} root > /dev/null 2>&1
> }
>
> # --- Main Logic ---
> mkdir -p ${RESULTS_DIR}
> echo "Target_Percentage(%),Target_Mbps,Measured_Mbps" > ${SUMMARY_CSV}
>
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> echo "====================================================="
> echo "CBS Benchmark for Graphing (HW Offload Mode)"
> echo "Results will be stored in ./${RESULTS_DIR}/"
> echo "Starting in 3 seconds..."
> echo "====================================================="
> sleep 3
>
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>     request_mbps=$((target_mbps + 50))
>     json_output_file="${RESULTS_DIR}/result_${percent}pct.json"
>
>     echo
>     echo "[TEST] Target: ${percent}% (${target_mbps} Mbps)"
>
>     clear_qdiscs
>     sleep 1
>     setup_qdiscs ${target_bps}
>     if [ $? -ne 0 ]; then
>         echo "  -> SKIPPING test due to setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP" >> ${SUMMARY_CSV}
>         continue
>     fi
>
>     echo "  -> Running iperf3, saving full data to ${json_output_file}"
>     iperf3 -c ${PARTNER_PC_IP} -u -b ${request_mbps}M -t 10 --tos ${TOS_VALUE} -J > ${json_output_file}
>
>     if [ ! -s "${json_output_file}" ]; then
>         echo "  -> FAILED to run iperf3 or generate JSON output."
>         measured_mbps="N/A"
>     else
> # S32G2 보드 터미널에서 실행 이용해 JSON에서 최종 평균 bitrate 추출 (bits_per_second)
>         avg_bps=$(jq '.end.sum.bits_per_second' ${json_output_file})
>         # bps를 Mbps로 변환
>         measured_mbps=$(awk "BEGIN {printf \"%.2f\", ${avg_bps}/1000000}")
>         echo "  -> Average Measured: ${measured_mbps} Mbits/sec"
>     fi

    echo "${percent},${target_mbps},${measured_mbps}" >> ${SUMMARY_CSV}
done

echo
echo "===============>
>     echo "${percent},${target_mbps},${measured_mbps}" >> ${SUMMARY_CSV}
> done
>
> echo
> echo "====================================================="
> echo "Benchmark finished. Summary:"
> echo "====================================================="
> cat ${SUMMARY_CSV}
> echo "Full per-second data is available in ./${RESULTS_DIR}/"
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x cbs_benchmark_graph.sh && ./cbs_benchmark_graph.sh
=====================================================
CBS Benchmark for Graphing (HW Offload Mode)
Results will be stored in ./benchmark_results_2024-10-11_05-39-47/
Starting in 3 seconds...
=====================================================

[TEST] Target: 80% (800 Mbps)
Setting up Qdiscs (HW Offload) for idleslope=800000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to setup CBS with HW offload.
  -> SKIPPING test due to setup failure.

[TEST] Target: 50% (500 Mbps)
Setting up Qdiscs (HW Offload) for idleslope=500000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to setup CBS with HW offload.
  -> SKIPPING test due to setup failure.

[TEST] Target: 20% (200 Mbps)
Setting up Qdiscs (HW Offload) for idleslope=200000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to setup CBS with HW offload.
  -> SKIPPING test due to setup failure.

[TEST] Target: 10% (100 Mbps)
Setting up Qdiscs (HW Offload) for idleslope=100000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to setup CBS with HW offload.
  -> SKIPPING test due to setup failure.

[TEST] Target: 5% (50 Mbps)
Setting up Qdiscs (HW Offload) for idleslope=50000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to setup CBS with HW offload.
  -> SKIPPING test due to setup failure.

=====================================================
Benchmark finished. Summary:
=====================================================
Target_Percentage(%),Target_Mbps,Measured_Mbps
80,800,FAILED_SETUP
50,500,FAILED_SETUP
20,200,FAILED_SETUP
10,100,FAILED_SETUP
5,50,FAILED_SETUP
Full per-second data is available in ./benchmark_results_2024-10-11_05-39-47/
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > cbs_benchmark_precise_sw.sh
> #!/bin/bash
>
> # --- Configuration ---
> IFACE="end0"
> PARTNER_PC_IP="192.168.1.11"
> LINK_SPEED_BPS=1000000000
> TOS_VALUE=0x80
> RESULTS_DIR="benchmark_precise_sw_$(date +%F_%H-%M-%S)"
> SUMMARY_CSV="${RESULTS_DIR}/summary.csv"
>
> # Test bandwidth percentages: 10%, 9%, 8%, ..., 1%
> BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
> setup_qdiscs_sw() {
>     local idleslope_bps=$1
>     # sendslope = idleslope - link_speed
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     # 1. Add MQPRIO qdisc
>     tc qdisc add dev ${IFACE} root handle 1: mqprio \
>         hw 0 num_tc 5 map 1 1 2 3 4 queues 1@0 1@1 1@2 1@3 1@4
>
>     # 2. Add CBS qdisc (Software mode, no offload)
>     #    parent 1:2 targets the queue for ToS 0x80
>     tc qdisc add dev ${IFACE} parent 1:2 cbs \
>         idleslope ${idleslope_bps} sendslope ${sendslope_bps}
>
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to setup Software CBS for ${idleslope_bps}bps."
>         return 1
>     fi
>     return 0
> }
>
> clear_qdiscs() {
>     # Silently delete all root qdiscs for the interface
>     tc qdisc del dev ${IFACE} root > /dev/null 2>&1
> }
>
> # --- Main Logic ---
> mkdir -p ${RESULTS_DIR}
> echo "Target_Percentage(%),Target_Mbps,Measured_Mbps" > ${SUMMARY_CSV}
>
> # Ensure qdiscs are cleared at the start and on exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> echo "=========================================================="
> echo "Precise CBS Benchmark (10% to 1%) in Software Mode"
> echo "Please ensure iperf3 server is running on ${PARTNER_PC_IP}"
> echo "Results will be stored in ./${RESULTS_DIR}/"
> echo "Starting in 5 seconds..."
> echo "=========================================================="
> sleep 5
>
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>     # Request slightly more bandwidth than the limit
>     request_mbps=$((target_mbps + 10))
>     json_output_file="${RESULTS_DIR}/result_${percent}pct.json"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo "[TEST] Target: ${percent}% (${target_mbps} Mbps)"
>
>     # 1. Clear previous rules and set up new ones
>     clear_qdiscs
>     sleep 1
>
>     setup_qdiscs_sw ${target_bps}
>     if [ $? -ne 0 ]; then
>         echo "  -> SKIPPING test due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP" >> ${SUMMARY_CSV}
>         continue
>     fi
>
>     # 2. Run iperf3 and save per-second data to JSON
>     echo "  -> Running iperf3 for 10 seconds..."
>     iperf3 -c ${PARTNER_PC_IP} -u -b ${request_mbps}M -t 10 --tos ${TOS_VALUE} -J > ${json_output_file}
>
>     # 3. Parse result and write to summary CSV
>     if [ ! -s "${json_output_file}" ]; then
>         echo "  -> FAILED to run iperf3 or generate JSON output."
>         measured_mbps="N/A"
    else
        # Extract average bits_per_second from the 'end'->'sum' block in the JSON
        avg_bps=$(jq '.end.sum.bits_per_second' ${json_output_file})
        if [ "$avg_bps" == "null" ] || [ -z "$avg_bps" ]; then
            measured_mbps="ERROR_PARSING"
        else
>     else
>         # Extract average bits_per_second from the 'end'->'sum' block in the JSON
>         avg_bps=$(jq '.end.sum.bits_per_second' ${json_output_file})
>         if [ "$avg_bps" == "null" ] || [ -z "$avg_bps" ]; then
>             measured_mbps="ERROR_PARSING"
>         else
>             # Convert bps to Mbps with 2 decimal places
>             measured_mbps=$(awk "BEGIN {printf \"%.2f\", ${avg_bps}/1000000}")
>         fi
>         echo "  -> iperf3 Average Measured: ${measured_mbps} Mbits/sec"
>     fi
>
>     echo "${percent},${target_mbps},${measured_mbps}" >> ${SUMMARY_CSV}
> done
>
> echo
> echo "=========================================================="
> echo "Precise benchmark finished. Final summary:"
> echo "=========================================================="
> cat ${SUMMARY_CSV}
> echo
> echo "Full per-second data for graphing is available in the ./${RESULTS_DIR}/ directory."
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# # Make the script executable and run it
chmod +x cbs_benchmark_precise_sw.sh && ./cbs_benchmark_precise_sw.shroot@s32g274ardb2:~# chmod +x cbs_benchmark_prec                                                                                                                        ise_sw.sh && ./cbs_benchmark_precise_sw.sh
==========================================================
Precise CBS Benchmark (10% to 1%) in Software Mode
Please ensure iperf3 server is running on 192.168.1.11
Results will be stored in ./benchmark_precise_sw_2024-10-11_05-42-55/
Starting in 5 seconds...
==========================================================

----------------------------------------------------------
[TEST] Target: 10% (100 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 9% (90 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 8% (80 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 7% (70 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 6% (60 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 5% (50 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 4% (40 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 3% (30 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 2% (20 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

----------------------------------------------------------
[TEST] Target: 1% (10 Mbps)
  -> Running iperf3 for 10 seconds...
./cbs_benchmark_precise_sw.sh: line 89: jq: command not found
  -> iperf3 Average Measured: ERROR_PARSING Mbits/sec

==========================================================
Precise benchmark finished. Final summary:
==========================================================
Target_Percentage(%),Target_Mbps,Measured_Mbps
10,100,ERROR_PARSING
9,90,ERROR_PARSING
8,80,ERROR_PARSING
7,70,ERROR_PARSING
6,60,ERROR_PARSING
5,50,ERROR_PARSING
4,40,ERROR_PARSING
3,30,ERROR_PARSING
2,20,ERROR_PARSING
1,10,ERROR_PARSING

Full per-second data for graphing is available in the ./benchmark_precise_sw_2024-10-11_05-42-55/ directory.
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_pro_cbs_benchmark.sh
> #!/bin/bash
>
> # ==============================================================================
> # Professional CBS Benchmark Script for S32G2
> #
> # - Mode: Software CBS (No HW Offload)
> # - Duration: 60 seconds per test
> # - Range: 10% down to 1% of 1Gbps link speed
> # - Data Parsing: Robust parsing of iperf3 standard output (no jq required)
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000
> readonly TOS_VALUE=0x80
> readonly RESULTS_DIR="pro_benchmark_sw_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_DIR}/summary.csv"
> readonly TEST_DURATION=60
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Function Definitions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Add MQPRIO qdisc (handle 1:)
>     # This creates the parent queue structure
>     tc qdisc add dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc 5 map 1 1 2 3 4 queues 1@0 1@1 1@2 1@3 1@4
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting."
>         exit 1
>     fi
>
>     # 2. Add CBS qdisc (parent 1:2) without offload
>     tc qdisc add dev "${IFACE}" parent 1:2 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting."
>         exit 1
>     fi
>     echo "INFO: Qdisc setup successful."
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     # Silently attempt to delete qdiscs. Errors are ignored.
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization
> mkdir -p "${RESULTS_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks
> echo "=========================================================="
> echo "          PROFESSIONAL CBS BENCHMARK (SW MODE)"
> echo "=========================================================="
> echo "INFO: Test duration is ${TEST_DURATION} seconds per run."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}"
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>     # Request bandwidth is set 50% higher than the target to ensure shaping occurs
>     request_mbps=$((target_mbps * 3 / 2))
>
>     full_log_file="${RESULTS_DIR}/result_${percent}pct.log"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST] Target: ${percent}% (${target_mbps} Mbps)"
>
>     # 3.1. Clear and set new qdisc rules
>     clear_qdiscs
>     sleep 1 # Give the system a moment to process the deletion
>     setup_qdiscs "${target_bps}"
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test, logging to ${full_log_file}..."
>     iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps}M" -t "${TEST_DURATION}" --tos "${TOS_VALUE}" > "${full_log_                                                                                                                        file}" 2>&1
>
>     # 3.3. Robustly parse the result
>     # We look for the summary line containing 'sender'
>     result_line=$(grep ' sender' "${full_log_file}")
>
>     if [ -z "${result_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no output."
>         measured_mbps="FAILED"
>         unit="N/A"
>     else
>         # Use awk to reliably extract the 7th (Bitrate) and 8th (Unit) fields
>         measured_mbps=$(echo "${result_line}" | awk '{print $7}')
>         unit=$(echo "${result_line}" | awk '{print $8}')
>         echo "INFO: Average measured rate: ${measured_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Full test logs are available in the ./${RESULTS_DIR}/ directory."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# # Grant execution permission and run the script
chmod +x run_pro_cbs_benchmark.sh && ./run_pro_cbs_benchmark.shroot@s32g274ardb2:~# chmod +x run_pro_cbs_benchmark.sh                                                                                                                         && ./run_pro_cbs_benchmark.sh
==========================================================
          PROFESSIONAL CBS BENCHMARK (SW MODE)
==========================================================
INFO: Test duration is 60 seconds per run.
INFO: Please ensure iperf3 server is running on 192.168.1.11
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST] Target: 10% (100 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=100000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_10pct.log...
INFO: Average measured rate: 150 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 9% (90 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=90000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_9pct.log...
INFO: Average measured rate: 135 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 8% (80 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=80000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_8pct.log...
INFO: Average measured rate: 120 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 7% (70 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=70000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_7pct.log...
INFO: Average measured rate: 105 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 6% (60 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=60000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_6pct.log...
INFO: Average measured rate: 90.0 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 5% (50 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=50000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_5pct.log...
INFO: Average measured rate: 75.0 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 4% (40 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=40000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_4pct.log...
INFO: Average measured rate: 60.0 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 3% (30 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=30000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_3pct.log...
INFO: Average measured rate: 45.0 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 2% (20 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=20000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_2pct.log...
INFO: Average measured rate: 30.0 Mbits/sec

----------------------------------------------------------
>>> [TEST] Target: 1% (10 Mbps)
INFO: Setting up MQPRIO and Software CBS for idleslope=10000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test, logging to pro_benchmark_sw_2024-10-11_05-51-59/result_1pct.log...
INFO: Average measured rate: 15.0 Mbits/sec

==========================================================
               BENCHMARK COMPLETED
==========================================================
Final Summary:
Target_Percentage(%),Target_Mbps,Measured_Mbps,Unit
10,100,150,Mbits/sec
9,90,135,Mbits/sec
8,80,120,Mbits/sec
7,70,105,Mbits/sec
6,60,90.0,Mbits/sec
5,50,75.0,Mbits/sec
4,40,60.0,Mbits/sec
3,30,45.0,Mbits/sec
2,20,30.0,Mbits/sec
1,10,15.0,Mbits/sec

Full test logs are available in the ./pro_benchmark_sw_2024-10-11_05-51-59/ directory.
==========================================================
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
*) 사용2g274ardb2:~# # "pro_benchmark..." 부분을 실제 디렉터리 이름으로 변경하거나 와일드카드(*
root@s32g274ardb2:~# tar -zcvf benchmark_results.tar.gz pro_benchmark_sw_*
pro_benchmark_sw_2024-10-11_05-51-59/
pro_benchmark_sw_2024-10-11_05-51-59/result_6pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_8pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_5pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_3pct.log
pro_benchmark_sw_2024-10-11_05-51-59/summary.csv
pro_benchmark_sw_2024-10-11_05-51-59/result_7pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_9pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_1pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_4pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_10pct.log
pro_benchmark_sw_2024-10-11_05-51-59/result_2pct.log
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# sz -be benchmark_results.tar.gz
�B00000000000000
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_benchmark.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script for S32G2
> #
> # - Measures CBS performance for a range of bandwidth percentages (10% down to 1%).
> # - Each test runs for 60 seconds.
> # - Data is collected at 100-millisecond intervals for high resolution.
> # - Outputs per-interval data to CSV files for detailed graphing.
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
> readonly TOS_VALUE=0x80 # ToS for the high-priority (CBS-controlled) queue
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_full_data_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10%, 9%, ..., 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc 5 map 1 1 2 3 4 queues 1@0 1@1 1@2 1@3 1@4
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
        return 1
    fi

    # 2. Add CBS qdisc as a child of MQPRIO (parent 1:2 or 1:3 depending on map)
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO (parent 1:2 or 1:3 depending on map)
>     # The map 1 1 2 3 4 means internal priority 2 is mapped to TC 2 (handle 1:3)
>     tc qdisc replace dev "${IFACE}" parent 1:3 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     # Silently attempt to delete qdiscs. Errors are ignored if qdisc doesn't exist.
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "        COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>     # Request bandwidth is set high (0 = max speed) for true shaping
>     request_mbps=0
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}" # Create a dedicated directory for each test's raw data
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
    # 3.2. Run iperf3 and capture its full output
    echo "INFO: Running iperf3 test for ${TEST_DURATION}s, logging to ${full_iperf_log}..."
    echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}" # CSV header for precise data

    stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps}" --tos "${TOS_VALUE}" -t "${TEST_DURATION}" -i "${                                                                                                                        REPORT_INTERVAL}" -f m>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, logging to ${full_iperf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}" # CSV header for precise data
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps}" --tos "${TOS_VALUE}" -t "${TEST_DURATION}" -i "                                                                                                                        ${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         # Extract the time interval (e.g., "0.00-0.10" or "59.90-60.00") and bitrate
>         interval_str = $3;
>         bitrate_val = $7;
>
>         # Extract the end time of the interval for the X-axis
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         # Print as CSV
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output."
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         # Extract the average bitrate and unit from the summary line
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# # Grant execution permission and run the script
chmod +x run_all_precise_cbs_benchmark.sh && ./run_all_precise_cbs_benchmark.shroot@s32g274ardb2:~# chmod +x run_all_                                                                                                                        precise_cbs_benchmark.sh && ./run_all_precise_cbs_benchmark.sh
==========================================================
        COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=100000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_10pct_target_100Mbps/ipe                                                                                                                        rf_full_log.log...
INFO: Test completed. Average measured rate: 726 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=90000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_9pct_target_90Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 729 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=80000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_8pct_target_80Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 714 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=70000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_7pct_target_70Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 729 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=60000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_6pct_target_60Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 713 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=50000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_5pct_target_50Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 742 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 4% (40 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=40000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_4pct_target_40Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 721 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 3% (30 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=30000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_3pct_target_30Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 748 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 2% (20 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=20000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_2pct_target_20Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 718 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 1% (10 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=10000000bps...
INFO: Qdisc setup successful.
INFO: Running iperf3 test for 60s, logging to cbs_precise_full_data_2024-10-11_07-03-19/test_1pct_target_10Mbps/iperf                                                                                                                        _full_log.log...
INFO: Test completed. Average measured rate: 740 Mbits/sec

==========================================================
               BENCHMARK COMPLETED
==========================================================
Final Summary of all tests:
Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit
10,100,726,Mbits/sec
9,90,729,Mbits/sec
8,80,714,Mbits/sec
7,70,729,Mbits/sec
6,60,713,Mbits/sec
5,50,742,Mbits/sec
4,40,721,Mbits/sec
3,30,748,Mbits/sec
2,20,718,Mbits/sec
1,10,740,Mbits/sec

Detailed per-interval data for graphing is available in:
  -> ./cbs_precise_full_data_2024-10-11_07-03-19/<test_percent_target_Mbps>/
Transfer this directory to your PC for plotting.
==========================================================
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_fixed.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FIXED)
> #
> # - Ensures correct mapping of --tos traffic to CBS-controlled queue.
> # - Fixed: Ensures CBS is applied to the correct traffic class.
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will map TOS_CLASS_A to a specific TC (e.g., TC 1, handle 1:2) for CBS.
> # - All other traffic will go to the default TC 0 (handle 1:1).
> readonly TOS_CLASS_A=0x80 # iperf3 will send with --tos 0x80
> readonly TC_FOR_CLASS_A=1 # TC index for Class A (handle will be 1:2)
> readonly MQPRIO_MAP="0 1 2 3 4 5 6 7" # Default map prio 0->TC0, prio 1->TC1 ...
> # We want to specifically map TOS_CLASS_A's internal priority (likely 4) to TC_FOR_CLASS_A (TC 1)
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_fixed_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO
>     #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
>     #    - map: Prio 4 (from TOS_CLASS_A) goes to TC 1. Other prios go to TC 0.
>     #      (Linux kernel often maps TOS 0x80 to internal priority 4)
>     #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc 2 map 0 0 0 0 1 0 0 0 \
>         queues 1@0 1@1
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
>     #    This is where the traffic from TOS_CLASS_A (prio 4) will go.
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2)."
>     echo "INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FIXED: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script ensures --tos 0x80 traffic is shaped by CBS."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Request bandwidth is set to 0 (max speed) to let CBS do the shaping
>     request_mbps=0
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}" # Create a dedicated directory for each test's raw data
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, logging to ${full_iperf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}" # CSV header for precise data
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps}" --tos "${TOS_VALUE}" -t "${TEST_DURATION}" -i "                                                                                                                        ${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         # Extract the time interval (e.g., "0.00-0.10" or "59.90-60.00") and bitrate
>         interval_str = $3;
>         bitrate_val = $7;
>
>         # Extract the end time of the interval for the X-axis
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         # Print as CSV
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output."
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         # Extract the average bitrate and unit from the summary line
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# # Grant execution permission and run the script
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_fixed.sh && ./run_all_precise_cbs_fixed.sh
==========================================================
    FIXED: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script ensures --tos 0x80 traffic is shaped by CBS.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=100000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_10pct_target_100Mbps/iperf_f                                                                                                                        ull_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=90000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_9pct_target_90Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=80000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_8pct_target_80Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=70000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_7pct_target_70Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=60000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_6pct_target_60Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=50000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_5pct_target_50Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 4% (40 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=40000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_4pct_target_40Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 3% (30 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=30000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_3pct_target_30Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 2% (20 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=20000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_2pct_target_20Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 1% (10 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=10000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, logging to cbs_precise_fixed_2024-10-11_07-16-16/test_1pct_target_10Mbps/iperf_ful                                                                                                                        l_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output.

==========================================================
               BENCHMARK COMPLETED
==========================================================
Final Summary of all tests:
Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit
10,100,FAILED,N/A
9,90,FAILED,N/A
8,80,FAILED,N/A
7,70,FAILED,N/A
6,60,FAILED,N/A
5,50,FAILED,N/A
4,40,FAILED,N/A
3,30,FAILED,N/A
2,20,FAILED,N/A
1,10,FAILED,N/A

Detailed per-interval data for graphing is available in:
  -> ./cbs_precise_fixed_2024-10-11_07-16-16/<test_percent_target_Mbps>/
Transfer this directory to your PC for plotting.
==========================================================
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v5.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FINAL FIXED VERSION)
> #
> # - Ensures correct iperf3 -b parameter usage.
> # - Confirms CBS is applied to the correct traffic class.
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will map TOS_CLASS_A to a specific TC (TC 1, handle 1:2) for CBS.
> # - Other traffic types (if any) go to default TC 0 (handle 1:1).
> readonly TOS_CLASS_A=0x80 # iperf3 will send with --tos 0x80
> # MQPRIO map: prio 4 (from TOS 0x80) goes to TC 1. Other prios go to TC 0.
> # Linux kernel typically maps TOS 0x80 to internal priority 4.
> readonly MQPRIO_MAP_PRIO_TO_TC="0 0 0 0 1 0 0 0" # prio 4 (5th element) maps to TC 1.
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_final_v5_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO
>     #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
>     #    - map: Configured based on MQPRIO_MAP_PRIO_TO_TC
>     #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc 2 map ${MQPRIO_MAP_PRIO_TO_TC} \
>         queues 1@0 1@1
>     if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
        return 1
    fi

    # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
    #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
    tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
        idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
        return 1
    fi
>     #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2)."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A} (internal prio 4) should be shaped."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL CBS BENCHMARK (HIGH-DENSITY & FIXED iperf3 -b)"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos 0x80."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # IMPORTANT FIX: Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     # This ensures CBS is the only shaper. (e.g., 2 Gbps or 10 Gbps, converted to M)
>     # Using 2000000000 for 2 Gbps
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_VALUE}" -t "${TEST_DURATIO                                                                                                                        N}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_final_v5.sh && ./run_all_precise_cbs_final_v5.sh
==========================================================
    FINAL CBS BENCHMARK (HIGH-DENSITY & FIXED iperf3 -b)
==========================================================
INFO: This script attempts to shape traffic with --tos 0x80.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=100000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_10pct_t                                                                                                                        arget_100Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_10pct_ta                                                                                                                        rget_100Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=90000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_9pct_ta                                                                                                                        rget_90Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_9pct_tar                                                                                                                        get_90Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=80000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_8pct_ta                                                                                                                        rget_80Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_8pct_tar                                                                                                                        get_80Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=70000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_7pct_ta                                                                                                                        rget_70Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_7pct_tar                                                                                                                        get_70Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=60000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_6pct_ta                                                                                                                        rget_60Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_6pct_tar                                                                                                                        get_60Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=50000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_5pct_ta                                                                                                                        rget_50Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_5pct_tar                                                                                                                        get_50Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 4% (40 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=40000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_4pct_ta                                                                                                                        rget_40Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_4pct_tar                                                                                                                        get_40Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 3% (30 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=30000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_3pct_ta                                                                                                                        rget_30Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_3pct_tar                                                                                                                        get_30Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 2% (20 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=20000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_2pct_ta                                                                                                                        rget_20Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_2pct_tar                                                                                                                        get_20Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 1% (10 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=10000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 0x80 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v5_2024-10-11_07-17-56/test_1pct_ta                                                                                                                        rget_10Mbps/iperf_full_log.log...
iperf3: parameter error - bad TOS value (must be between 0 and 255 inclusive)

Usage: iperf3 [-s|-c host] [options]
Try `iperf3 --help' for more information.
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v5_2024-10-11_07-17-56/test_1pct_tar                                                                                                                        get_10Mbps/iperf_full_log.log

==========================================================
               BENCHMARK COMPLETED
==========================================================
Final Summary of all tests:
Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit
10,100,FAILED,N/A
9,90,FAILED,N/A
8,80,FAILED,N/A
7,70,FAILED,N/A
6,60,FAILED,N/A
5,50,FAILED,N/A
4,40,FAILED,N/A
3,30,FAILED,N/A
2,20,FAILED,N/A
1,10,FAILED,N/A

Detailed per-interval data for graphing is available in:
  -> ./cbs_precise_final_v5_2024-10-11_07-17-56/<test_percent_target_Mbps>/
Transfer this directory to your PC for plotting.
==========================================================
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v6.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FINAL ATTEMPT)
> #
> # - FIX: Corrects iperf3 --tos parameter usage (using decimal value).
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will map TOS_CLASS_A to a specific TC (TC 1, handle 1:2) for CBS.
> # - Other traffic types (if any) go to default TC 0 (handle 1:1).
> readonly TOS_CLASS_A_DECIMAL=128 # iperf3 will send with --tos 128 (0x80 in decimal)
> # MQPRIO map: prio 4 (from TOS 128) goes to TC 1. Other prios go to TC 0.
> # Linux kernel typically maps TOS 128 (0x80) to internal priority 4.
> readonly MQPRIO_MAP_PRIO_TO_TC="0 0 0 0 1 0 0 0" # prio 4 (5th element) maps to TC 1.
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_final_v6_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO
>     #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
>     #    - map: Configured based on MQPRIO_MAP_PRIO_TO_TC
>     #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc 2 map ${MQPRIO_MAP_PRIO_TO_TC} \
>         queues 1@0 1@1
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
>     #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2)."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 4) should be shaped."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos ${TOS_CLASS_A_DECIMAL}."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_CLASS_A_DECIMAL}" -t "${TE                                                                                                                        ST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_final_v6.sh && ./run_all_precise_cbs_final_v6.sh
==========================================================
    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script attempts to shape traffic with --tos 128.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=100000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 128 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v6_2024-10-11_07-20-59/test_10pct_t                                                                                                                        arget_100Mbps/iperf_full_log.log...
INFO: Test completed. Average measured rate: 716 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=90000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 128 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v6_2024-10-11_07-20-59/test_9pct_ta                                                                                                                        rget_90Mbps/iperf_full_log.log...
INFO: Test completed. Average measured rate: 690 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=80000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 128 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v6_2024-10-11_07-20-59/test_8pct_ta                                                                                                                        rget_80Mbps/iperf_full_log.log...
INFO: Test completed. Average measured rate: 719 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=70000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 128 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v6_2024-10-11_07-20-59/test_7pct_ta                                                                                                                        rget_70Mbps/iperf_full_log.log...
^Ciperf3: interrupt - the client has terminated
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v6_2024-10-11_07-20-59/test_7pct_tar                                                                                                                        get_70Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Software CBS for idleslope=60000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2).
INFO: Traffic with --tos 128 (internal prio 4) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v6_2024-10-11_07-20-59/test_6pct_ta                                                                                                                        rget_60Mbps/iperf_full_log.log...
^Ciperf3: interrupt - the client has terminated
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v6_2024-10-11_07-20-59/test_6pct_tar                                                                                                                        get_60Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v7.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FINAL FIXED VERSION)
> #
> # - FIX: Removes 'hw 0' from mqprio to force pure software CBS for stability.
> # - Ensures correct iperf3 --tos parameter usage (using decimal value).
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will map TOS_CLASS_A to a specific TC (TC 1, handle 1:2) for CBS.
> # - Other traffic types (if any) go to default TC 0 (handle 1:1).
> readonly TOS_CLASS_A_DECIMAL=128 # iperf3 will send with --tos 128 (0x80 in decimal)
> # MQPRIO map: prio 4 (from TOS 128) goes to TC 1. Other prios go to TC 0.
> # Linux kernel typically maps TOS 128 (0x80) to internal priority 4.
> readonly MQPRIO_MAP_PRIO_TO_TC="0 0 0 0 1 0 0 0" # prio 4 (5th element) maps to TC 1.
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_final_v7_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Pure Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO (NO 'hw 0' option for pure software mode)
    #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
    #    - map: Configured based on MQPRIO_MAP_PRIO_TO_TC
    #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
    tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
        num_tc 2 map ${MQPRIO_MAP_PRIO_TO_TC} \
        queues 1@0 1@1
>     #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
>     #    - map: Configured based on MQPRIO_MAP_PRIO_TO_TC
>     #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         num_tc 2 map ${MQPRIO_MAP_PRIO_TO_TC} \
>         queues 1@0 1@1
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
    #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
    #    (NO 'offload 1' option for pure software mode)
    tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
        idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
>     #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
        return 1
    fi
    echo "INFO: Qdisc setup successful. Pure Software CBS applied to TC 1 (handle 1:2)."
    echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 4) should be shaped."
    return 0
}

>     #    (NO 'offload 1' option for pure software mode)
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. Pure Software CBS applied to TC 1 (handle 1:2)."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 4) should be shaped."
>     return 0
# --- Main Execution Logic ---

# 1. Initialization and setup directories
mkdir -p "${RESULTS_BASE_DIR}"
echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"

> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos ${TOS_CLASS_A_DECIMAL}."
> echo "INFO: Using PURE SOFTWARE CBS for maximum compatibility and reliability."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
    # 3.1. Clear previous qdiscs and set up new ones for current target
    clear_qdiscs
    sleep 1 # Short delay to ensure qdisc deletion is processed
    setup_qdiscs "${target_bps}"
    if [ $? -ne 0 ]; then
        echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_CLASS_A_DECIMAL}" -t "${TE                                                                                                                        ST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_final_v7.sh && ./run_all_precise_cbs_final_v7.sh
==========================================================
    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script attempts to shape traffic with --tos 128.
INFO: Using PURE SOFTWARE CBS for maximum compatibility and reliability.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=100000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 10% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=90000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 9% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=80000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 8% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=70000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 7% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=60000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 6% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v8.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (MQPRIO FIX)
> #
> # - FIX: Adjusts MQPRIO setup to match manual's 'num_tc 5' and 'map' for compatibility.
> #        Removes 'hw 0' from MQPRIO for pure software mode.
> # - Ensures correct iperf3 --tos parameter usage (using decimal value).
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will use TC 2 (handle 1:3) for CBS.
> # - iperf3 with --tos 128 (internal prio 4) will still target this TC due to default mapping.
> readonly TOS_CLASS_A_DECIMAL=128 # iperf3 will send with --tos 128 (0x80 in decimal)
>
> # MQPRIO map: Match manual's example for num_tc 5 and map, but without 'hw 0'
> # This maps prio 0->TC0, prio 1->TC1, prio 2->TC2, prio 3->TC3, prio 4->TC4
> readonly MQPRIO_NUM_TC=5
> readonly MQPRIO_MAP="0 1 2 3 4" # Priorites 0,1,2,3,4 map to TC 0,1,2,3,4
> readonly MQPRIO_QUEUES="1@0 1@1 1@2 1@3 1@4" # Queue for each TC
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_fixed_v8_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Pure Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO (NO 'hw 0' option for pure software mode)
>     #    Use MQPRIO_NUM_TC and MQPRIO_MAP from configuration
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         num_tc "${MQPRIO_NUM_TC}" map ${MQPRIO_MAP} \
>         queues ${MQPRIO_QUEUES}
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 2 (handle 1:3)
>     #    As per manual's example: parent 1:2 for TC 1, so for TC 2 it is 1:3
>     #    (NO 'offload 1' option for pure software mode)
>     tc qdisc replace dev "${IFACE}" parent 1:3 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. Pure Software CBS applied to TC 2 (handle 1:3)."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 4) should be shaped."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos ${TOS_CLASS_A_DECIMAL}."
> echo "INFO: Using PURE SOFTWARE CBS for maximum compatibility and reliability."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
on ${PARTNER_PC_IP}."
echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
sleep 5

# 3. Main test loop: Iterate through each target percentage
for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
    target> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_CLASS_A_DECIMAL}" -t "${TE                                                                                                                        ST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_final_v8.sh && ./run_all_precise_cbs_final_v8.sh
==========================================================
    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script attempts to shape traffic with --tos 128.
INFO: Using PURE SOFTWARE CBS for maximum compatibility and reliability.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=100000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 10% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=90000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 9% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=80000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 8% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v9.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FINAL ATTEMPT: Manual Compliance)
> #
> # - FIX: Complies with manual's warning: Avoids using hardware queue 0.
> #        Reinstates 'hw 0' in MQPRIO as required by hardware.
> # - Ensures correct iperf3 --tos parameter usage (using decimal value).
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will use TC 1 (handle 1:2) for CBS. This avoids hardware queue 0.
> # - iperf3 traffic needs to be mapped to internal priority 1.
> readonly TOS_CLASS_A_DECIMAL=32 # iperf3 will send with --tos 32 (0x20, typically maps to internal prio 1)
>
> # MQPRIO configuration: Strict compliance with manual + avoiding queue 0
> readonly MQPRIO_NUM_TC=5
> readonly MQPRIO_MAP="0 1 2 3 4" # Prio 0->TC0, Prio 1->TC1, Prio 2->TC2, Prio 3->TC3, Prio 4->TC4
> # IMPORTANT: Start queues from @1 to avoid hardware queue 0
> readonly MQPRIO_QUEUES="1@1 1@2 1@3 1@4 1@5" # TC0 uses queue 1, TC1 uses queue 2, etc.
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_final_v9_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Pure Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO (WITH 'hw 0' but avoiding queue 0)
>     #    This ensures MQPRIO is configured in hardware offload mode as per manual's example.
>     #    The actual 'offload' is handled by individual children qdiscs (like CBS).
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc "${MQPRIO_NUM_TC}" map ${MQPRIO_MAP} \
>         queues ${MQPRIO_QUEUES}
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
>     #    TC 1 has handle 1:2. This is where the traffic with internal prio 1 (from --tos 32) will go.
>     #    (NO 'offload 1' option for pure software mode on CBS itself)
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which uses HW Queue 2."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 1) should be shaped."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos ${TOS_CLASS_A_DECIMAL}."
> echo "INFO: MQPRIO configured to avoid HW Queue 0, as per manual's warning."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_CLASS_A_DECIMAL}" -t "${TE                                                                                                                        ST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_final_v9.sh && ./run_all_precise_cbs_final_v9.sh
==========================================================
    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script attempts to shape traffic with --tos 32.
INFO: MQPRIO configured to avoid HW Queue 0, as per manual's warning.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=100000000bps...
Error: sch_mqprio_lib: Queues 1:5 for TC 4 exceed the 5 TX queues available.
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 10% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=90000000bps...
Error: sch_mqprio_lib: Queues 1:5 for TC 4 exceed the 5 TX queues available.
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 9% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=80000000bps...
Error: sch_mqprio_lib: Queues 1:5 for TC 4 exceed the 5 TX queues available.
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 8% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=70000000bps...
Error: sch_mqprio_lib: Queues 1:5 for TC 4 exceed the 5 TX queues available.
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 7% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=60000000bps...
Error: sch_mqprio_lib: Queues 1:5 for TC 4 exceed the 5 TX queues available.
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 6% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=50000000bps...
Error: sch_mqprio_lib: Queues 1:5 for TC 4 exceed the 5 TX queues available.
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 5% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 4% (40 Mbps)
----------------------------------------------------------
^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v10.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FINAL ATTEMPT: Queue Index Fixed)
> #
> # - FIX: Corrects MQPRIO 'queues' parameter to match available hardware TX queues (0-4).
> #        Ensures correct mapping of traffic to CBS-controlled queue.
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will use TC 1 (handle 1:2) for CBS. This maps to HW Queue 1. (Avoiding HW Queue 0)
> # - iperf3 traffic needs to be mapped to internal priority 1.
> readonly TOS_CLASS_A_DECIMAL=32 # iperf3 will send with --tos 32 (0x20, typically maps to internal prio 1)
>
> # MQPRIO configuration: Strict compliance with manual + avoiding hardware queue 0
> readonly MQPRIO_NUM_TC=5 # Number of Traffic Classes
> readonly MQPRIO_MAP="0 1 2 3 4" # Prio 0->TC0, Prio 1->TC1, ..., Prio 4->TC4
> # FIX: Use hardware queues 1, 2, 3, 4, 0. This ensures TC 0 gets HW queue 1, TC 1 gets HW queue 2, etc.
> # TC 0 -> HW Queue 1
> # TC 1 -> HW Queue 2 (This is where our CBS traffic will go, so it avoids HW Queue 0)
> # TC 2 -> HW Queue 3
> # TC 3 -> HW Queue 4
> # TC 4 -> HW Queue 0 (assign the problematic queue 0 to the lowest priority TC 4)
> readonly MQPRIO_QUEUES="1@1 1@2 1@3 1@4 1@0" # Assigns HW queues to TCs: TC0@HW1, TC1@HW2, TC2@HW3, TC3@HW4, TC4@HW                                                                                                                        0
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_final_v10_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO and Pure Software CBS for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO (WITH 'hw 0' but carefully assigned queues)
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc "${MQPRIO_NUM_TC}" map ${MQPRIO_MAP} \
>         queues ${MQPRIO_QUEUES}
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
>     #    TC 1 has handle 1:2. This is where the traffic with internal prio 1 (from --tos 32) will go.
>     #    This TC 1 will be mapped to HW Queue 2.
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
ps}"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
        return 1
    fi
    echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which maps to HW Queue 2."
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
    echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 1) should be shaped."
    return 0
}

# Function to cleanly remove all qdiscs from the interface
clear_qdiscs() {
>     fi
>     echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which maps to HW Queue 2."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 1) should be shaped."
>     return 0
    tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
}

# --- Main Execution Logic ---

# 1. Initialization and setup directories
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos ${TOS_CLASS_A_DECIMAL}."
> echo "INFO: MQPRIO configured to avoid HW Queue 0 for primary CBS traffic."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_CLASS_A_DECIMAL}" -t "${TE                                                                                                                        ST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
   fi

    # 3.4. Log to summary CSV
    echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
done

>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_final_v10.sh && ./run_all_precise_cbs_final_v10.sh
==========================================================
    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script attempts to shape traffic with --tos 32.
INFO: MQPRIO configured to avoid HW Queue 0 for primary CBS traffic.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=100000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which maps to HW Queue 2.
INFO: Traffic with --tos 32 (internal prio 1) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v10_2024-10-11_07-32-47/test_10pct_                                                                                                                        target_100Mbps/iperf_full_log.log...
INFO: Test completed. Average measured rate: 553 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=90000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which maps to HW Queue 2.
INFO: Traffic with --tos 32 (internal prio 1) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v10_2024-10-11_07-32-47/test_9pct_t                                                                                                                        arget_90Mbps/iperf_full_log.log...
INFO: Test completed. Average measured rate: 525 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=80000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which maps to HW Queue 2.
INFO: Traffic with --tos 32 (internal prio 1) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v10_2024-10-11_07-32-47/test_8pct_t                                                                                                                        arget_80Mbps/iperf_full_log.log...
INFO: Test completed. Average measured rate: 538 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO and Pure Software CBS for idleslope=70000000bps...
INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which maps to HW Queue 2.
INFO: Traffic with --tos 32 (internal prio 1) should be shaped.
INFO: Running iperf3 test for 60s, requesting 2000M, logging to cbs_precise_final_v10_2024-10-11_07-32-47/test_7pct_t                                                                                                                        arget_70Mbps/iperf_full_log.log...
^Ciperf3: interrupt - the client has terminated
ERROR: iperf3 test failed or produced no summary output. Check cbs_precise_final_v10_2024-10-11_07-32-47/test_7pct_ta                                                                                                                        rget_70Mbps/iperf_full_log.log

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v11.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FINAL ATTEMPT: HW Offload Explicit)
> #
> # - FIX: Reinstates 'offload 1' in CBS qdisc as per manual's example.
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will use TC 1 (handle 1:2) for CBS. This maps to HW Queue 1. (Avoiding HW Queue 0)
> # - iperf3 traffic needs to be mapped to internal priority 1.
> readonly TOS_CLASS_A_DECIMAL=32 # iperf3 will send with --tos 32 (0x20, typically maps to internal prio 1)
>
> # MQPRIO configuration: Strict compliance with manual + avoiding hardware queue 0
> readonly MQPRIO_NUM_TC=5 # Number of Traffic Classes
> readonly MQPRIO_MAP="0 1 2 3 4" # Prio 0->TC0, Prio 1->TC1, ..., Prio 4->TC4
> # IMPORTANT: Use hardware queues 1, 2, 3, 4, 0. This ensures TC 0 gets HW queue 1, TC 1 gets HW queue 2, etc.
> # TC 0 -> HW Queue 1
> # TC 1 -> HW Queue 2 (This is where our CBS traffic will go, avoiding HW Queue 0)
> # TC 2 -> HW Queue 3
> # TC 3 -> HW Queue 4
> # TC 4 -> HW Queue 0 (assign the problematic queue 0 to the lowest priority TC 4)
> readonly MQPRIO_QUEUES="1@1 1@2 1@3 1@4 1@0" # Assigns HW queues to TCs: TC0@HW1, TC1@HW2, TC2@HW3, TC3@HW4, TC4@HW                                                                                                                        0
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_final_v11_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO (HW mode) and CBS (HW offload) for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO (WITH 'hw 0' for hardware mode)
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         hw 0 num_tc "${MQPRIO_NUM_TC}" map ${MQPRIO_MAP} \
>         queues ${MQPRIO_QUEUES}
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
>     #    REINSTATE 'offload 1' here as per manual's example for CBS
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}" offload 1
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc with HW offload for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2) which maps to HW Queue 2 (HW Offload)."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 1) should be shaped."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos ${TOS_CLASS_A_DECIMAL}."
> echo "INFO: MQPRIO and CBS are configured with HW Offload, avoiding HW Queue 0 for CBS."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
    current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
    mkdir -p "${current_test_dir}"
    full_iperf_log="${current_test_dir}/iperf_full_log.log"
    precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"

    echo
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
        echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
        continue
    fi

    # 3.2. Run iperf3 and capture its full output
    echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_iper                                                                                                                        f_log}..."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_CLASS_A_DECIMAL}" -t "${TE                                                                                                                        ST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_all_precise_cbs_final_v11.sh && ./run_all_precise_cbs_final_v11.sh
==========================================================
    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script attempts to shape traffic with --tos 32.
INFO: MQPRIO and CBS are configured with HW Offload, avoiding HW Queue 0 for CBS.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO (HW mode) and CBS (HW offload) for idleslope=100000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to add CBS qdisc with HW offload for 100000000bps. Aborting test scenario.
WARNING: Skipping scenario 10% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO (HW mode) and CBS (HW offload) for idleslope=90000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to add CBS qdisc with HW offload for 90000000bps. Aborting test scenario.
WARNING: Skipping scenario 9% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO (HW mode) and CBS (HW offload) for idleslope=80000000bps...
Error: Specified device failed to setup cbs hardware offload.
ERROR: Failed to add CBS qdisc with HW offload for 80000000bps. Aborting test scenario.
WARNING: Skipping scenario 8% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~#
root@s32g274ardb2:~#
root@s32g274ardb2:~# cat << 'EOF' > run_all_precise_cbs_final_v12.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density CBS Benchmark Script (FINAL: Pure Software Mode)
> #
> # - FIX: Disables ALL hardware offloading hints in MQPRIO and CBS.
> #        Forces pure software-based CBS for maximum compatibility.
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> # Traffic Class (TC) Mapping Strategy:
> # - We will use TC 1 (handle 1:2) for CBS. This maps to HW Queue 1.
> # - iperf3 traffic needs to be mapped to internal priority 1.
> readonly TOS_CLASS_A_DECIMAL=32 # iperf3 will send with --tos 32 (0x20, typically maps to internal prio 1)
>
> # MQPRIO configuration: PURE SOFTWARE MODE
> readonly MQPRIO_NUM_TC=5 # Number of Traffic Classes
> readonly MQPRIO_MAP="0 1 2 3 4" # Prio 0->TC0, Prio 1->TC1, ..., Prio 4->TC4
> # IMPORTANT: Use standard hardware queues 0, 1, 2, 3, 4. No 'hw 0' in MQPRIO.
> readonly MQPRIO_QUEUES="1@0 1@1 1@2 1@3 1@4" # Assigns HW queues to TCs: TC0@HW0, TC1@HW1, ..., TC4@HW4
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="cbs_precise_final_v12_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
> setup_qdiscs() {
>     local idleslope_bps=$1
>     local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))
>
>     echo "INFO: Setting up MQPRIO (Software mode) and CBS (Software mode) for idleslope=${idleslope_bps}bps..."
>
>     # 1. Replace the root qdisc with MQPRIO (NO 'hw 0' option for pure software mode)
>     tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
>         num_tc "${MQPRIO_NUM_TC}" map ${MQPRIO_MAP} \
>         queues ${MQPRIO_QUEUES}
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
>         return 1
>     fi
>
>     # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
>     #    TC 1 has handle 1:2. This is where the traffic with internal prio 1 (from --tos 32) will go.
>     #    (NO 'offload 1' option for pure software mode on CBS itself)
>     tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
        idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
        return 1
    fi
    echo "INFO: Qdisc setup successful. Pure Software CBS applied to TC 1 (handle 1:2)."
>         idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: Qdisc setup successful. Pure Software CBS applied to TC 1 (handle 1:2)."
>     echo "INFO: Traffic with --tos ${TOS_CLASS_A_DECIMAL} (internal prio 1) should be shaped."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK"
> echo "=========================================================="
> echo "INFO: This script attempts to shape traffic with --tos ${TOS_CLASS_A_DECIMAL}."
> echo "INFO: Using PURE SOFTWARE CBS for maximum compatibility and reliability."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdiscs "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_CLASS_A_DECIMAL}" -t "${TE                                                                                                                        ST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
mod +x run_all_precise_cbs_final_v12.sh && ./run_all_precise_cbs_final_v12.shroot@s32g274ardb2:~# chmod +x run_all_pr                                                                                                                        ecise_cbs_final_v12.sh && ./run_all_precise_cbs_final_v12.sh
==========================================================
    FINAL ATTEMPT: COMPREHENSIVE HIGH-DENSITY CBS BENCHMARK
==========================================================
INFO: This script attempts to shape traffic with --tos 32.
INFO: Using PURE SOFTWARE CBS for maximum compatibility and reliability.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO (Software mode) and CBS (Software mode) for idleslope=100000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 10% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO (Software mode) and CBS (Software mode) for idleslope=90000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 9% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up MQPRIO (Software mode) and CBS (Software mode) for idleslope=80000000bps...
RTNETLINK answers: Operation not supported
ERROR: Failed to add MQPRIO qdisc. Aborting test scenario.
WARNING: Skipping scenario 8% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
^C
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_tbf_benchmark.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density TBF Benchmark Script (Alternative to MQPRIO)
> #
> # - FIX: Uses TBF (Token Bucket Filter) qdisc for bandwidth shaping,
> #        as MQPRIO is not supported.
> # - Tests simple rate limiting for a range of bandwidth percentages.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed
>
> readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
> readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)
>
> readonly RESULTS_BASE_DIR="tbf_precise_v13_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup TBF qdisc for a given rate
> setup_qdisc_tbf() {
>     local rate_bps=$1
>
>     echo "INFO: Setting up TBF qdisc for rate=${rate_bps}bps..."
>
>     # Replace the root qdisc with TBF
>     # 'rate' specifies the maximum rate the token bucket can send at.
>     tc qdisc replace dev "${IFACE}" root handle 1: tbf \
>         rate "${rate_bps}" burst $((rate_bps / 8 / 10)) # burst = 1/10th of rate in bytes
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add TBF qdisc. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: TBF qdisc setup successful."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization and setup directories
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> # Ensure a clean state on script start and exit
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. Pre-flight checks and user prompt
> echo "=========================================================="
> echo "    TBF BENCHMARK (Alternative to MQPRIO/CBS)"
> echo "=========================================================="
> echo "INFO: This script uses TBF for basic rate limiting."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
> echo "INFO: Target percentages: ${BANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Press Ctrl+C to abort. Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop: Iterate through each target percentage
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>
    # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
    request_mbps_iperf3=2000 # Request 2Gbps from iperf3

    # Define file paths for current test scenario
    current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     # Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
>     request_mbps_iperf3=2000 # Request 2Gbps from iperf3
>
>     # Define file paths for current test scenario
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     # 3.1. Clear previous qdiscs and set up new ones for current target
>     clear_qdiscs
>     sleep 1 # Short delay to ensure qdisc deletion is processed
>     setup_qdisc_tbf "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     # 3.2. Run iperf3 and capture its full output
>     echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_ip                                                                                                                        erf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     # IMPORTANT: TBF applies to all traffic, so --tos is not strictly needed,
>     #            but it also doesn't hurt. Removed for simplicity.
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" -t "${TEST_DURATION}" -i "${REPORT_INTE                                                                                                                        RVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval_str = $3;
>         bitrate_val = $7;
>
>         split(interval_str, time_parts, "-");
>         timestamp = time_parts[2];
>
>         print timestamp","bitrate_val;
>     }' >> "${precise_data_csv}"
>
>     # 3.3. Parse the final summary line from the full log
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     # 3.4. Log to summary CSV
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
done

# 4. Final summary and instructions
echo
echo "=========================================================="
echo "               BENCHMARK COMPLETED"
> done
>
> # 4. Final summary and instructions
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/<test_percent_target_Mbps>/"
> echo "Transfer this directory to your PC for plotting."
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_tbf_benchmark.sh && ./run_tbf_benchmark.sh
==========================================================
    TBF BENCHMARK (Alternative to MQPRIO/CBS)
==========================================================
INFO: This script uses TBF for basic rate limiting.
INFO: Each test runs for 60 seconds with 0.1s reporting.
INFO: Target percentages: 10 9 8 7 6 5 4 3 2 1% of 1000000000bps link.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Press Ctrl+C to abort. Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=100000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 10% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=90000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 9% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=80000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 8% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=70000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 7% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=60000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 6% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=50000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 5% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 4% (40 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=40000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 4% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 3% (30 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=30000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 3% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 2% (20 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=20000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 2% due to qdisc setup failure.

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 1% (10 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc for rate=10000000bps...
tbf: either "limit" or "latency" is required.
Usage: ... tbf limit BYTES burst BYTES[/BYTES] rate KBPS [ mtu BYTES[/BYTES] ]
        [ peakrate KBPS ] [ latency TIME ] [ overhead BYTES ] [ linklayer TYPE ]
ERROR: Failed to add TBF qdisc. Aborting test scenario.
WARNING: Skipping scenario 1% due to qdisc setup failure.

==========================================================
               BENCHMARK COMPLETED
==========================================================
Final Summary of all tests:
Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit
10,100,FAILED_SETUP,N/A
9,90,FAILED_SETUP,N/A
8,80,FAILED_SETUP,N/A
7,70,FAILED_SETUP,N/A
6,60,FAILED_SETUP,N/A
5,50,FAILED_SETUP,N/A
4,40,FAILED_SETUP,N/A
3,30,FAILED_SETUP,N/A
2,20,FAILED_SETUP,N/A
1,10,FAILED_SETUP,N/A

Detailed per-interval data for graphing is available in:
  -> ./tbf_precise_v13_2024-10-11_07-39-58/<test_percent_target_Mbps>/
Transfer this directory to your PC for plotting.
==========================================================
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# cat << 'EOF' > run_tbf_benchmark_final.sh
> #!/bin/bash
>
> # ==============================================================================
> # Comprehensive High-Density TBF Benchmark Script (FINAL, TBF Parameter Fixed)
> #
> # - FIX: Adds the mandatory 'limit' parameter to the TBF qdisc command.
> # - This version should finally provide accurate bandwidth shaping.
> # - Test range: 10% down to 1% of 1Gbps link speed.
> # - High-resolution data (100ms intervals).
> # ==============================================================================
>
> # --- Configuration ---
> readonly IFACE="end0"
> readonly PARTNER_PC_IP="192.168.1.11"
> readonly LINK_SPEED_BPS=1000000000
>
> readonly TEST_DURATION=60
> readonly REPORT_INTERVAL=0.1
>
> readonly RESULTS_BASE_DIR="tbf_benchmark_final_v14_$(date +%F_%H-%M-%S)"
> readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"
>
> # Test bandwidth percentages: 10% down to 1%
> readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))
>
> # --- Functions ---
>
> # Function to setup TBF qdisc for a given rate
> setup_qdisc_tbf() {
>     local rate_bps=$1
>     # Convert bps to Bps for burst/limit calculations
>     local rate_Bps=$((rate_bps / 8))
>
>     # Burst size is typically set to handle short bursts, e.g., 1/10th of the rate
>     local burst_bytes=$((rate_Bps / 10))
>     # Ensure burst is at least MTU size
>     if [ "${burst_bytes}" -lt 1500 ]; then
>         burst_bytes=1500
>     fi
>
>     # Limit should be larger than burst to allow for some queueing
>     local limit_bytes=$((burst_bytes * 10))
>
>     echo "INFO: Setting up TBF qdisc: rate=${rate_bps}bps, burst=${burst_bytes}B, limit=${limit_bytes}B..."
>
>     # Replace the root qdisc with TBF, including the 'limit' parameter
>     tc qdisc replace dev "${IFACE}" root handle 1: tbf \
>         rate "${rate_bps}" \
>         burst "${burst_bytes}" \
>         limit "${limit_bytes}"
>
>     if [ $? -ne 0 ]; then
>         echo "ERROR: Failed to add TBF qdisc. Aborting test scenario."
>         return 1
>     fi
>     echo "INFO: TBF qdisc setup successful."
>     return 0
> }
>
> # Function to cleanly remove all qdiscs from the interface
> clear_qdiscs() {
>     tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
> }
>
> # --- Main Execution Logic ---
>
> # 1. Initialization
> mkdir -p "${RESULTS_BASE_DIR}"
> echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"
>
> clear_qdiscs
> trap clear_qdiscs EXIT
>
> # 2. User prompt
> echo "=========================================================="
> echo "    FINAL TBF BENCHMARK (TBF PARAMETER FIXED)"
> echo "=========================================================="
> echo "INFO: This script uses TBF with the correct 'limit' parameter."
> echo "INFO: Each test runs for ${TEST_DURATION} seconds."
> echo "INFO: Please ensure iperf3 server is running on ${PARTNER_PC_IP}."
> echo "INFO: Starting in 5 seconds..."
> sleep 5
>
> # 3. Main test loop
> for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
>     target_bps=$((LINK_SPEED_BPS * percent / 100))
>     target_mbps=$((target_bps / 1000000))
>     request_mbps_iperf3=2000 # Request 2Gbps from iperf3
>
>     current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
>     mkdir -p "${current_test_dir}"
>     full_iperf_log="${current_test_dir}/iperf_full_log.log"
>     precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"
>
>     echo
>     echo "----------------------------------------------------------"
>     echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
>     echo "----------------------------------------------------------"
>
>     clear_qdiscs
>     sleep 1
>     setup_qdisc_tbf "${target_bps}"
>     if [ $? -ne 0 ]; then
>         echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
>         echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
>         continue
>     fi
>
>     echo "INFO: Running iperf3 test, logging to ${full_iperf_log}..."
>     echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"
>
>     stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" -t "${TEST_DURATION}" -i "${REPORT_INTE                                                                                                                        RVAL}" -f m \
>     | tee "${full_iperf_log}" \
>     | grep ']' \
>     | grep -v 'sender' \
>     | awk '{
>         interval = $3;
>         bitrate = $7;
>         split(interval, time, "-");
>         print time[2]","bitrate;
>     }' >> "${precise_data_csv}"
>
>     final_summary_line=$(grep ' sender' "${full_iperf_log}")
>
>     if [ -z "${final_summary_line}" ]; then
>         echo "ERROR: iperf3 test failed or produced no summary output."
>         measured_avg_mbps="FAILED"
>         unit="N/A"
>     else
>         measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
>         unit=$(echo "${final_summary_line}" | awk '{print $8}')
>         echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
>     fi
>
>     echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
> done
>
> # 4. Final summary
> echo
> echo "=========================================================="
> echo "               BENCHMARK COMPLETED"
> echo "=========================================================="
> echo "Final Summary of all tests:"
> cat "${SUMMARY_CSV}"
> echo
> echo "Detailed per-interval data for graphing is available in:"
> echo "  -> ./${RESULTS_BASE_DIR}/"
> echo "=========================================================="
> EOF
root@s32g274ardb2:~#
root@s32g274ardb2:~# chmod +x run_tbf_benchmark_final.sh && ./run_tbf_benchmark_final.sh
==========================================================
    FINAL TBF BENCHMARK (TBF PARAMETER FIXED)
==========================================================
INFO: This script uses TBF with the correct 'limit' parameter.
INFO: Each test runs for 60 seconds.
INFO: Please ensure iperf3 server is running on 192.168.1.11.
INFO: Starting in 5 seconds...

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 10% (100 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=100000000bps, burst=1250000B, limit=12500000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_10pct_target_100Mbps/iperf_ful                                                                                                                        l_log.log...
INFO: Test completed. Average measured rate: 97.4 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 9% (90 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=90000000bps, burst=1125000B, limit=11250000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_9pct_target_90Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 87.6 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 8% (80 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=80000000bps, burst=1000000B, limit=10000000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_8pct_target_80Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 77.9 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 7% (70 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=70000000bps, burst=875000B, limit=8750000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_7pct_target_70Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 68.1 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 6% (60 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=60000000bps, burst=750000B, limit=7500000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_6pct_target_60Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 58.4 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 5% (50 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=50000000bps, burst=625000B, limit=6250000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_5pct_target_50Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 48.7 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 4% (40 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=40000000bps, burst=500000B, limit=5000000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_4pct_target_40Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 39.0 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 3% (30 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=30000000bps, burst=375000B, limit=3750000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_3pct_target_30Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 29.2 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 2% (20 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=20000000bps, burst=250000B, limit=2500000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_2pct_target_20Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 19.5 Mbits/sec

----------------------------------------------------------
>>> [TEST SCENARIO] Target: 1% (10 Mbps)
----------------------------------------------------------
INFO: Setting up TBF qdisc: rate=10000000bps, burst=125000B, limit=1250000B...
INFO: TBF qdisc setup successful.
INFO: Running iperf3 test, logging to tbf_benchmark_final_v14_2024-10-11_07-41-18/test_1pct_target_10Mbps/iperf_full_                                                                                                                        log.log...
INFO: Test completed. Average measured rate: 9.75 Mbits/sec

==========================================================
               BENCHMARK COMPLETED
==========================================================
Final Summary of all tests:
Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit
10,100,97.4,Mbits/sec
9,90,87.6,Mbits/sec
8,80,77.9,Mbits/sec
7,70,68.1,Mbits/sec
6,60,58.4,Mbits/sec
5,50,48.7,Mbits/sec
4,40,39.0,Mbits/sec
3,30,29.2,Mbits/sec
2,20,19.5,Mbits/sec
1,10,9.75,Mbits/sec

Detailed per-interval data for graphing is available in:
  -> ./tbf_benchmark_final_v14_2024-10-11_07-41-18/
==========================================================
root@s32g274ardb2:~# ^C
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
�드카드(*) 사용2:~# # "tbf_benchmark_final_v14_..." 부분을 실제 디렉터리 이름으로 변경하거나 와일
root@s32g274ardb2:~# tar -zcvf results.tar.gz tbf_benchmark_final_v14_*
tbf_benchmark_final_v14_2024-10-11_07-41-18/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_8pct_target_80Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_8pct_target_80Mbps/precise_data_8pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_8pct_target_80Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_6pct_target_60Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_6pct_target_60Mbps/precise_data_6pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_6pct_target_60Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/summary_all_tests.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_10pct_target_100Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_10pct_target_100Mbps/precise_data_10pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_10pct_target_100Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_4pct_target_40Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_4pct_target_40Mbps/precise_data_4pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_4pct_target_40Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_7pct_target_70Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_7pct_target_70Mbps/precise_data_7pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_7pct_target_70Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_2pct_target_20Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_2pct_target_20Mbps/precise_data_2pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_2pct_target_20Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_9pct_target_90Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_9pct_target_90Mbps/precise_data_9pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_9pct_target_90Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_3pct_target_30Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_3pct_target_30Mbps/precise_data_3pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_3pct_target_30Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_5pct_target_50Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_5pct_target_50Mbps/precise_data_5pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_5pct_target_50Mbps/iperf_full_log.log
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_1pct_target_10Mbps/
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_1pct_target_10Mbps/precise_data_1pct.csv
tbf_benchmark_final_v14_2024-10-11_07-41-18/test_1pct_target_10Mbps/iperf_full_log.log
root@s32g274ardb2:~# # S32G2 보드 터미널에서 실행
root@s32g274ardb2:~# sz -be results.tar.gz
�NOTICE:  Reset status: Power-On Reset
NOTICE:  BL2: v2.10.14(release):bsp44.0-2.10.14
NOTICE:  BL2: Built : 08:13:32, May 13 2025
NOTICE:  BL2: Booting BL31


U-Boot 2022.04+g9a00323278+p0 (May 13 2025 - 06:57:56 +0000)

SoC:   NXP S32G274A rev. 2.1
CPU:   ARM Cortex-A53 r0p4 @ max 1000 MHz
Model: NXP S32G274A-RDB2
DRAM:  4 GiB
Core:  314 devices, 25 uclasses, devicetree: board
MMC:   FSL_SDHC: 0
Loading Environment from MMC... OK
s32cc_serdes_phy serdes@40480000: Using mode 0 for SerDes subsystem
pci_s32cc pcie@40400000: Could not set DEVICE ID
pci_s32cc pcie@40400000: Configuring as RootComplex
pci_s32cc pcie@40400000: Failed to get link up
In:    serial@401c8000
Out:   serial@401c8000
Err:   serial@401c8000
Board revision: RDB2/GLDBOX Revision E
PCIe:   BusDevFun       VendorId   DeviceId   Device Class       Sub-Class
__________________________________________________________________________
pcie@40400000 RootComplex
|   `-- 01:00.00        0x1957     0x4002     Bridge device           0x04
Net:
Warning: ethernet@4033c000 (eth0) using random MAC address - 1a:7b:2b:95:19:24
eth0: ethernet@4033c000
Found PFE version 0x50300 (S32G2)
pfeng pfeng-base: Uploading CLASS firmware
pfeng pfeng-base: EMAC0 block was initialized
pfeng pfeng-base: EMAC1 block was initialized
pfeng pfeng-base: EMAC2 block was initialized
pfeng pfeng-base: Enabling the CLASS block
pfeng pfeng-base: PFE Platform started successfully (mask: 7)
s32cc_serdes_phy serdes@44180000: Using mode 4 for SerDes subsystem
s32cc_serdes_phy serdes@44180000: Unstable RX detected on XPCS0
, eth1: pfe0s32cc_serdes_phy serdes@44180000: Unstable RX detected on XPCS1
, eth2: pfe1, eth3: pfe2
Hit any key to stop autoboot:  0
switch to partitions #0, OK
mmc0 is current device
17139720 bytes read in 719 ms (22.7 MiB/s)
Booting from mmc ...
59234 bytes read in 6 ms (9.4 MiB/s)
## Flattened Device Tree blob at 83000000
   Booting using the fdt blob at 0x83000000
   Using Device Tree in place at 0000000083000000, end 0000000083011761
   fixup: pfe1: update phy addr to 0x8
Failed to configure XPCS1_1
Failed to update XPCS1 for SerDes1

Starting kernel ...

[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034]
[    0.000000] Linux version 6.6.85-rt53-g6208e1d0d7b5 (oe-user@oe-host) (aarch64-fsl-linux-gcc (GCC) 13.3.0, GNU ld (GNU Binutils) 2.42.0.20240723) #1 SMP PREEMPT Wed May 14 13:40:03 UTC 2025
[    0.000000] Machine model: NXP S32G2 Reference Design Board 2 (S32G-VNP-RDB2)
[    0.000000] earlycon: linflex0 at MMIO 0x00000000401c8000 (options '')
[    0.000000] printk: legacy bootconsole [linflex0] enabled
[    0.000000] OF: reserved mem: 0x0000000034000000..0x000000003407ffff (512 KiB) nomap non-reusable pfebufs@34000000
[    0.000000] OF: reserved mem: 0x0000000034080000..0x000000003409ffff (128 KiB) nomap non-reusable pfebufs@34080000
[    0.000000] Reserved memory: created DMA memory pool at 0x0000000083200000, size 3 MiB
[    0.000000] OF: reserved mem: initialized node pfebufs@83200000, compatible id shared-dma-pool
[    0.000000] OF: reserved mem: 0x0000000083200000..0x00000000835dffff (3968 KiB) nomap non-reusable pfebufs@83200000
[    0.000000] OF: reserved mem: 0x00000000835e0000..0x00000000835fffff (128 KiB) map non-reusable pfebufs@835e0000
[    0.000000] OF: reserved mem: 0x0000000084000000..0x0000000084ffffff (16384 KiB) nomap non-reusable shm@84000000
[    0.000000] OF: reserved mem: 0x00000000c0000000..0x00000000c03fffff (4096 KiB) nomap non-reusable shm@c0000000
[    0.000000] OF: reserved mem: 0x00000000c0400000..0x00000000c07fffff (4096 KiB) nomap non-reusable shm@c0400000
[    0.000000] OF: reserved mem: 0x00000000d0000000..0x00000000d000007f (0 KiB) nomap non-reusable shm@d0000000
[    0.000000] OF: reserved mem: 0x00000000d0000080..0x00000000d00000ff (0 KiB) nomap non-reusable shm@d0000080
[    0.000000] OF: reserved mem: 0x00000000ff600000..0x00000000ff7fffff (2048 KiB) nomap non-reusable atf@ff600000
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000080000000-0x00000000ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   [mem 0x0000000100000000-0x00000008ffffffff]
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000080000000-0x00000000831fffff]
[    0.000000]   node   0: [mem 0x0000000083200000-0x00000000835dffff]
[    0.000000]   node   0: [mem 0x00000000835e0000-0x0000000083ffffff]
[    0.000000]   node   0: [mem 0x0000000084000000-0x0000000084ffffff]
[    0.000000]   node   0: [mem 0x0000000085000000-0x00000000bfffffff]
[    0.000000]   node   0: [mem 0x00000000c0000000-0x00000000c07fffff]
[    0.000000]   node   0: [mem 0x00000000c0800000-0x00000000cfffffff]
[    0.000000]   node   0: [mem 0x00000000d0001000-0x00000000ff5fffff]
[    0.000000]   node   0: [mem 0x00000000ff600000-0x00000000ff7fffff]
[    0.000000]   node   0: [mem 0x00000000ff800000-0x00000000ffffffff]
[    0.000000]   node   0: [mem 0x0000000880000000-0x00000008ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000080000000-0x00000008ffffffff]
[    0.000000] On node 0, zone DMA: 1 pages in unavailable ranges
[    0.000000] cma: Reserved 256 MiB at 0x00000000ef600000 on node -1
[    0.000000] psci: probing for conduit method from DT.
[    0.000000] psci: PSCIv1.1 detected in firmware.
[    0.000000] psci: Using standard PSCI v0.2 function IDs
[    0.000000] psci: MIGRATE_INFO_TYPE not supported.
[    0.000000] psci: SMC Calling Convention v1.4
[    0.000000] percpu: Embedded 19 pages/cpu s40104 r8192 d29528 u77824
[    0.000000] Detected VIPT I-cache on CPU0
[    0.000000] CPU features: detected: GIC system register CPU interface
[    0.000000] CPU features: detected: ARM erratum 845719
[    0.000000] CPU features: detected: NXP erratum ERR050481 (TLBI by VA handled incorrectly)
[    0.000000] CPU features: detected: ARM errata 1165522, 1319367, 1530923, or 1530924
[    0.000000] alternatives: applying boot alternatives
[    0.000000] Kernel command line: console=ttyLF0,115200 root=/dev/mmcblk0p3 rootwait rw earlycon
[    0.000000] Dentry cache hash table entries: 524288 (order: 10, 4194304 bytes, linear)
[    0.000000] Inode-cache hash table entries: 262144 (order: 9, 2097152 bytes, linear)
[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 1032191
[    0.000000] mem auto-init: stack:all(zero), heap alloc:off, heap free:off
[    0.000000] software IO TLB: area num 4.
[    0.000000] software IO TLB: mapped [mem 0x00000000eb600000-0x00000000ef600000] (64MB)
[    0.000000] Memory: 3737540K/4194300K available (10688K kernel code, 738K rwdata, 3220K rodata, 1984K init, 233K bss, 194616K reserved, 262144K cma-reserved)
[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=4, Nodes=1
[    0.000000] rcu: Preemptible hierarchical RCU implementation.
[    0.000000] rcu:     RCU event tracing is enabled.
[    0.000000] rcu:     RCU restricting CPUs from NR_CPUS=8 to nr_cpu_ids=4.
[    0.000000]  Trampoline variant of Tasks RCU enabled.
[    0.000000]  Tracing variant of Tasks RCU enabled.
[    0.000000] rcu: RCU calculated value of scheduler-enlistment delay is 25 jiffies.
[    0.000000] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=4
[    0.000000] NR_IRQS: 64, nr_irqs: 64, preallocated irqs: 0
[    0.000000] GICv3: GIC: Using split EOI/Deactivate mode
[    0.000000] GICv3: 544 SPIs implemented
[    0.000000] GICv3: 0 Extended SPIs implemented
[    0.000000] GICv3: MBI range [167:182]
[    0.000000] GICv3: Using MBI frame 0x0000000050800000
[    0.000000] Root IRQ handler: gic_handle_irq
[    0.000000] GICv3: GICv3 features: 16 PPIs
[    0.000000] GICv3: CPU0: found redistributor 0 region 0:0x0000000050880000
[    0.000000] ITS: No ITS available, not enabling LPIs
[    0.000000] rcu: srcu_init: Setting srcu_struct sizes based on contention.
[    0.000000] arch_timer: cp15 timer(s) running at 5.00MHz (phys).
[    0.000000] clocksource: arch_sys_counter: mask: 0xffffffffffffff max_cycles: 0x127350b88, max_idle_ns: 440795202120 ns
[    0.000001] sched_clock: 56 bits at 5MHz, resolution 200ns, wraps every 4398046511100ns
[    0.008459] Console: colour dummy device 80x25
[    0.012516] Calibrating delay loop (skipped), value calculated using timer frequency.. 10.00 BogoMIPS (lpj=20000)
[    0.022721] pid_max: default: 32768 minimum: 301
[    0.027444] Mount-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
[    0.034712] Mountpoint-cache hash table entries: 8192 (order: 4, 65536 bytes, linear)
[    0.044338] RCU Tasks: Setting shift to 2 and lim to 1 rcu_task_cb_adjust=1 rcu_task_cpu_ids=4.
[    0.052712] RCU Tasks Trace: Setting shift to 2 and lim to 1 rcu_task_cb_adjust=1 rcu_task_cpu_ids=4.
[    0.062063] rcu: Hierarchical SRCU implementation.
[    0.066597] rcu:     Max phase no-delay instances is 1000.
[    0.072904] smp: Bringing up secondary CPUs ...
[    0.077732] Detected VIPT I-cache on CPU1
[    0.077816] GICv3: CPU1: found redistributor 1 region 0:0x00000000508a0000
[    0.077870] CPU1: Booted secondary processor 0x0000000001 [0x410fd034]
[    0.078654] Detected VIPT I-cache on CPU2
[    0.078728] GICv3: CPU2: found redistributor 100 region 0:0x00000000508c0000
[    0.078767] CPU2: Booted secondary processor 0x0000000100 [0x410fd034]
[    0.079478] Detected VIPT I-cache on CPU3
[    0.079528] GICv3: CPU3: found redistributor 101 region 0:0x00000000508e0000
[    0.079552] CPU3: Booted secondary processor 0x0000000101 [0x410fd034]
[    0.079644] smp: Brought up 1 node, 4 CPUs
[    0.135765] SMP: Total of 4 processors activated.
[    0.140433] CPU features: detected: 32-bit EL0 Support
[    0.145576] CPU features: detected: CRC32 instructions
[    0.150758] CPU: All CPU(s) started at EL2
[    0.154769] alternatives: applying system-wide alternatives
[    0.162558] devtmpfs: initialized
[    0.176335] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns
[    0.185697] futex hash table entries: 1024 (order: 4, 65536 bytes, linear)
[    0.201914] pinctrl core: initialized pinctrl subsystem
[    0.207743] NET: Registered PF_NETLINK/PF_ROUTE protocol family
[    0.214376] DMA: preallocated 512 KiB GFP_KERNEL pool for atomic allocations
[    0.221286] DMA: preallocated 512 KiB GFP_KERNEL|GFP_DMA pool for atomic allocations
[    0.229054] DMA: preallocated 512 KiB GFP_KERNEL|GFP_DMA32 pool for atomic allocations
[    0.237108] thermal_sys: Registered thermal governor 'step_wise'
[    0.237251] hw-breakpoint: found 6 breakpoint and 4 watchpoint registers.
[    0.249694] ASID allocator initialised with 65536 entries
[    0.255117] Serial: AMBA PL011 UART driver
[    0.259125] scmi_core: SCMI protocol bus registered
[    0.265222] scmi_protocol scmi_dev.1: Enabled polling mode TX channel - prot_id:16
[    0.272781] arm-scmi firmware:scmi: SCMI Notifications - Core Enabled.
[    0.278951] arm-scmi firmware:scmi: SCMI Protocol v2.0 'NXP:S32G274A' Firmware version 0x0
[    0.296124] /soc/interrupt-controller@50800000: Fixed dependency cycle(s) with /soc/interrupt-controller@50800000
[    0.308308] /soc/siul2@4009c000/siul2-pinctrl@4009c240: Fixed dependency cycle(s) with /soc/siul2@4009c000/siul2-pinctrl@4009c240/jtag_pins
[    0.330936] Modules: 28512 pages in range for non-PLT usage
[    0.330959] Modules: 520032 pages in range for PLT usage
[    0.336717] HugeTLB: registered 1.00 GiB page size, pre-allocated 0 pages
[    0.348373] HugeTLB: 0 KiB vmemmap can be freed for a 1.00 GiB page
[    0.354623] HugeTLB: registered 32.0 MiB page size, pre-allocated 0 pages
[    0.361391] HugeTLB: 0 KiB vmemmap can be freed for a 32.0 MiB page
[    0.367642] HugeTLB: registered 2.00 MiB page size, pre-allocated 0 pages
[    0.374411] HugeTLB: 0 KiB vmemmap can be freed for a 2.00 MiB page
[    0.380663] HugeTLB: registered 64.0 KiB page size, pre-allocated 0 pages
[    0.387431] HugeTLB: 0 KiB vmemmap can be freed for a 64.0 KiB page
[    0.403392] SCSI subsystem initialized
[    0.406945] usbcore: registered new interface driver usbfs
[    0.412231] usbcore: registered new interface driver hub
[    0.417532] usbcore: registered new device driver usb
[    0.423293] pps_core: LinuxPPS API ver. 1 registered
[    0.427827] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti <giometti@linux.it>
[    0.436952] PTP clock support registered
[    0.442117] vgaarb: loaded
[    0.444760] clocksource: Switched to clocksource arch_sys_counter
[    0.458711] NET: Registered PF_INET protocol family
[    0.463462] IP idents hash table entries: 65536 (order: 7, 524288 bytes, linear)
[    0.473907] tcp_listen_portaddr_hash hash table entries: 2048 (order: 3, 32768 bytes, linear)
[    0.482098] Table-perturb hash table entries: 65536 (order: 6, 262144 bytes, linear)
[    0.489744] TCP established hash table entries: 32768 (order: 6, 262144 bytes, linear)
[    0.497884] TCP bind hash table entries: 32768 (order: 8, 1048576 bytes, linear)
[    0.506168] TCP: Hash tables configured (established 32768 bind 32768)
[    0.512497] UDP hash table entries: 2048 (order: 4, 65536 bytes, linear)
[    0.519076] UDP-Lite hash table entries: 2048 (order: 4, 65536 bytes, linear)
[    0.526363] NET: Registered PF_UNIX/PF_LOCAL protocol family
[    0.532269] RPC: Registered named UNIX socket transport module.
[    0.537768] RPC: Registered udp transport module.
[    0.542447] RPC: Registered tcp transport module.
[    0.547133] RPC: Registered tcp-with-tls transport module.
[    0.552602] RPC: Registered tcp NFSv4.1 backchannel transport module.
[    0.559059] PCI: CLS 0 bytes, default 64
[    0.564370] workingset: timestamp_bits=62 max_order=20 bucket_order=0
[    0.571057] fuse: init (API version 7.39)
[    0.574840] NET: Registered PF_ALG protocol family
[    0.579465] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 248)
[    0.586795] io scheduler mq-deadline registered
[    0.591305] io scheduler kyber registered
[    0.595308] io scheduler bfq registered
[    0.603592] s32cc-siul2-pinctrl 4009c240.siul2-pinctrl: initialized s32 pinctrl driver
[    0.612978] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.620875] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.629366] gpio gpiochip0: Static allocation of GPIO base is deprecated, use dynamic allocation.
[    0.638932] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.646769] s32cc-siul2-gpio 4009d700.siul2-gpio: No cache defaults, reading back from HW
[    0.666896] printk: legacy console [ttyLF0] enabled000 (irq = 23, base_baud = 7812500) is a FSL_LINFLEX
[    0.666896] printk: legacy console [ttyLF0] enabled
[    0.676814] printk: legacy bootconsole [linflex0] disabled
[    0.676814] printk: legacy bootconsole [linflex0] disabled
[    0.689674] 401cc000.serial: ttyLF1 at MMIO 0x401cc000 (irq = 24, base_baud = 7812500) is a FSL_LINFLEX
[    0.701047] s32cc_fccu 4030c000.fccu: FCCU status is 0 (normal)
[    0.710245] sja1110-sw@1 enforce active low on GPIO handle
[    0.718813] spi-nor spi6.0: mx25uw51245g (65536 Kbytes)
[    0.724725] 8 fixed-partitions partitions found on MTD device 0.spi
[    0.731103] Creating 8 MTD partitions on "0.spi":
[    0.735891] 0x000000000000-0x000004000000 : "Flash-Image"
[    0.741759] 0x000000000000-0x0000000d0000 : "BL2"
[    0.746863] 0x0000000d0000-0x0000002a0000 : "FIP"
[    0.751975] 0x0000002a0000-0x0000002b0000 : "U-Boot-Env"
[    0.757699] 0x0000002b0000-0x000001380000 : "Kernel"
[    0.763070] 0x000001380000-0x0000013b0000 : "DTB"
[    0.768191] 0x0000013b0000-0x0000032c0000 : "Rootfs"
[    0.773562] 0x0000032c0000-0x000004000000 : "PFE-Firmware"
[    0.781792] vcan: Virtual CAN interface driver
[    0.786321] slcan: serial line CAN interface driver
[    0.791275] CAN device driver interface
[    0.796514] flexcan 401b4000.can: device registered (reg_base=(____ptrval____), irq(s):
[    0.804662] flexcan 401b4000.can:  30
[    0.808391] flexcan 401b4000.can:  31
[    0.812112] flexcan 401b4000.can:  32
[    0.815834] flexcan 401b4000.can:  33
[    0.819550] flexcan 401b4000.can: )
[    0.824126] flexcan 401be000.can: device registered (reg_base=(____ptrval____), irq(s):
[    0.832274] flexcan 401be000.can:  34
[    0.836002] flexcan 401be000.can:  35
[    0.839724] flexcan 401be000.can:  36
[    0.843443] flexcan 401be000.can:  37
[    0.847161] flexcan 401be000.can: )
[    0.851039] e100: Intel(R) PRO/100 Network Driver
[    0.855819] e100: Copyright(c) 1999-2006 Intel Corporation
[    0.861419] e1000: Intel(R) PRO/1000 Network Driver
[    0.866371] e1000: Copyright (c) 1999-2006 Intel Corporation.
[    0.872233] e1000e: Intel(R) PRO/1000 Network Driver
[    0.877271] e1000e: Copyright(c) 1999 - 2015 Intel Corporation.
[    0.883307] igb: Intel(R) Gigabit Ethernet Network Driver
[    0.888792] igb: Copyright (c) 2007-2014 Intel Corporation.
[    0.895752] hse-uio 40210000.mu0b: firmware not found
[    0.901521] usbcore: registered new interface driver uas
[    0.906960] usbcore: registered new interface driver usb-storage
[    0.914214] imx_usb 44064000.usb: No over current polarity defined
[    0.933154] ci_hdrc ci_hdrc.0: EHCI Host Controller
[    0.938292] ci_hdrc ci_hdrc.0: new USB bus registered, assigned bus number 1
[    0.960767] ci_hdrc ci_hdrc.0: USB 2.0 started, EHCI 1.00
[    0.966429] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002, bcdDevice= 6.06
[    0.974824] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    0.982160] usb usb1: Product: EHCI Host Controller
[    0.987113] usb usb1: Manufacturer: Linux 6.6.85-rt53-g6208e1d0d7b5 ehci_hcd
[    0.994274] usb usb1: SerialNumber: ci_hdrc.0
[    0.999299] hub 1-0:1.0: USB hub found
[    1.003143] hub 1-0:1.0: 1 port detected
[    1.009066] s32cc-rtc 40060000.rtc: registered as rtc0
[    1.014318] s32cc-rtc 40060000.rtc: setting system clock to 1970-01-01T00:00:00 UTC (0)
[    1.022662] i2c_dev: i2c /dev entries driver
[    1.027584] s32cc-wdt 4010c000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.037679] s32cc-wdt 40200000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.046973] s32cc-wdt 40204000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.056258] s32cc-wdt 40208000.watchdog: S32CC Watchdog Timer Registered. timeout=30s (nowayout=0)
[    1.067340] sdhci: Secure Digital Host Controller Interface driver
[    1.073651] sdhci: Copyright(c) Pierre Ossman
[    1.078081] sdhci-pltfm: SDHCI platform and OF driver helper
[    1.084130] SMCCC: SOC_ID: ARCH_SOC_ID not implemented, skipping ....
[    1.091371] hse 40211000.mu1b: interface mu1b not active
[    1.097434] usbcore: registered new interface driver usbhid
[    1.103100] usbhid: USB HID core driver
[    1.116501] mmc0: SDHCI controller on 402f0000.mmc [402f0000.mmc] using ADMA
[    1.123836] s32-adc 401f8000.adc: using dma0chan4 for ADC DMA transfers
[    1.131168] s32-adc 401f8000.adc: Device initialized successfully.
[    1.149000] s32-adc 402e8000.adc: using dma1chan16 for ADC DMA transfers
[    1.156357] s32-adc 402e8000.adc: Device initialized successfully.
[    1.158091] mmc0: new high speed SDHC card at address 0001
[    1.168662] hw perfevents: enabled with armv8_cortex_a53 PMU driver, 7 counters available
[    1.168868] mmcblk0: mmc0:0001 SD32G 28.8 GiB
[    1.178711] s32-siul2-nvmem 4009c000.nvram: Initialized s32cc siul2 nvmem driver
[    1.183442]  mmcblk0: p1 p2 p3
[    1.189109] s32-siul2-nvmem 44010000.nvram: Initialized s32cc siul2 nvmem driver
[    1.200152] GACT probability on
[    1.203369] Mirror/redirect action on
[    1.207172] Simple TC action Loaded
[    1.211301] netem: version 1.3
[    1.214465] u32 classifier
[    1.217213]     Performance counters on
[    1.221104]     input device check on
[    1.224825]     Actions configured
[    1.229612] xt_time: kernel timezone is -0000
[    1.234276] NET: Registered PF_INET6 protocol family
[    1.240354] Segment Routing with IPv6
[    1.244130] In-situ OAM (IOAM) with IPv6
[    1.248219] sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
[    1.254774] NET: Registered PF_PACKET protocol family
[    1.260045] can: controller area network core
[    1.264521] NET: Registered PF_CAN protocol family
[    1.269387] can: raw protocol
[    1.272396] can: broadcast manager protocol
[    1.276648] can: netlink gateway - max_hops=1
[    1.281152] 8021q: 802.1Q VLAN Support v1.8
[    1.305667] i2c i2c-0: using pinctrl states for GPIO recovery
[    1.311622] i2c i2c-0: using generic GPIOs for recovery
[    1.317705] pca953x 0-0022: using AI
[    1.328721] rtc-pcf85063 0-0051: registered as rtc1
[    1.333746] i2c i2c-0: IMX I2C adapter registered
[    1.338597] i2c i2c-0: using dma0chan5 (tx) and dma0chan6 (rx) for DMA transfers
[    1.346876] i2c i2c-2: using pinctrl states for GPIO recovery
[    1.352814] i2c i2c-2: using generic GPIOs for recovery
[    1.358209] i2c i2c-2: IMX I2C adapter registered
[    1.363044] i2c i2c-2: using dma1chan17 (tx) and dma1chan18 (rx) for DMA transfers
[    1.371471] i2c i2c-4: using pinctrl states for GPIO recovery
[    1.377376] i2c i2c-4: using generic GPIOs for recovery
[    1.384259] ina2xx 4-0040: power monitor ina231 (Rshunt = 1000 uOhm)
[    1.390765] i2c i2c-4: IMX I2C adapter registered
[    1.395605] i2c i2c-4: using dma1chan19 (tx) and dma1chan20 (rx) for DMA transfers
[    1.424284] phy-s32cc-serdes 40480000.serdes: Using mode 0 for SerDes subsystem
[    1.432211] phy-s32cc-serdes 44180000.serdes: Using mode 4 for SerDes subsystem
[    1.762518] s32cc-pcie 40400000.pcie: Failed to stabilize PHY link
[    1.768811] s32cc-pcie 40400000.pcie: Configuring as RootComplex
[    1.774955] s32cc-pcie 40400000.pcie: host bridge /soc/pcie@40400000 ranges:
[    1.782143] s32cc-pcie 40400000.pcie:       IO 0x5ffffe0000..0x5ffffeffff -> 0x0000000000
[    1.790462] s32cc-pcie 40400000.pcie:      MEM 0x5800000000..0x5ffffdffff -> 0x0000000000
[    1.798790] s32cc-pcie 40400000.pcie: Memory resource size exceeds max for 32 bits
[    2.806629] s32cc-pcie 40400000.pcie: Phy link never came up
[    2.812393] s32cc-pcie 40400000.pcie: Link Up failed, EndPoint may not be connected
[    2.820196] s32cc-pcie 40400000.pcie: iATU: unroll T, 6 ob, 4 ib, align 4K, limit 1024G
[    3.828516] s32cc-pcie 40400000.pcie: Phy link never came up
[    3.834272] s32cc-pcie 40400000.pcie: Link Up failed, EndPoint may not be connected
[    4.836883] s32cc-pcie 40400000.pcie: Phy link never came up
[    4.843238] s32cc-pcie 40400000.pcie: PCI host bridge to bus 0000:00
[    4.849703] pci_bus 0000:00: root bus resource [bus 00-ff]
[    4.855278] pci_bus 0000:00: root bus resource [io  0x0000-0xffff]
[    4.861559] pci_bus 0000:00: root bus resource [mem 0x5800000000-0x5ffffdffff] (bus address [0x00000000-0x7fffdffff])
[    4.872367] pci 0000:00:00.0: [1957:4002] type 01 class 0x060400
[    4.878486] pci 0000:00:00.0: reg 0x10: [mem 0x5800000000-0x58000fffff]
[    4.885219] pci 0000:00:00.0: reg 0x38: [mem 0x5800000000-0x580000ffff pref]
[    4.892476] pci 0000:00:00.0: supports D1
[    4.896551] pci 0000:00:00.0: PME# supported from D0 D1 D3hot D3cold
[    4.906714] pci 0000:00:00.0: BAR 0: assigned [mem 0x5800000000-0x58000fffff]
[    4.913974] pci 0000:00:00.0: BAR 6: assigned [mem 0x5800100000-0x580010ffff pref]
[    4.921666] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    4.927352] pcieport 0000:00:00.0: PME: Signaling with IRQ 51
[    4.934563] s32cc-dwmac 4033c000.ethernet: IRQ eth_wake_irq not found
[    4.941129] s32cc-dwmac 4033c000.ethernet: IRQ eth_lpi not found
[    4.948205] s32cc-dwmac 4033c000.ethernet: User ID: 0x10, Synopsys ID: 0x51
[    4.955297] s32cc-dwmac 4033c000.ethernet:   DWMAC4/5
[    4.960351] s32cc-dwmac 4033c000.ethernet: DMA HW capability register supported
[    4.967779] s32cc-dwmac 4033c000.ethernet: RX Checksum Offload Engine supported
[    4.975198] s32cc-dwmac 4033c000.ethernet: TX Checksum insertion supported
[    4.982179] s32cc-dwmac 4033c000.ethernet: Wake-Up On Lan supported
[    4.988612] s32cc-dwmac 4033c000.ethernet: Enable RX Mitigation via HW Watchdog Timer
[    4.996565] s32cc-dwmac 4033c000.ethernet: Enabled L3L4 Flow TC (entries=8)
[    5.003648] s32cc-dwmac 4033c000.ethernet: Enabled RFS Flow TC (entries=10)
[    5.010756] s32cc-dwmac 4033c000.ethernet: Enabling HW TC (entries=256, max_off=256)
[    5.018625] s32cc-dwmac 4033c000.ethernet: Using 32/32 bits DMA host/device width
[    5.032982] hwmon hwmon1: temp1_input not attached to any thermal zone
[    5.042364] qoriq_thermal 400a8000.tmu: Critical rising/falling temperature threshold = 5 degree(s)
[    5.057046] nxp_s32cc_ddr_perf 403e0000.ddr-perf: probing device
[    5.063526] nxp_s32cc_ddr_perf 403e0000.ddr-perf: device initialized successfully
[    5.071452] clk: Disabling unused clocks




[    5.270047] EXT4-fs (mmcblk0p3): recovery complete
[    5.276014] EXT4-fs (mmcblk0p3): mounted filesystem 7998e1b8-8d1a-412f-8924-0a57aa6bfd99 r/w with ordered data mode. Quota mode: disabled.
[    5.288109] VFS: Mounted root (ext4 filesystem) on device 179:3.
[    5.294968] devtmpfs: mounted
[    5.298363] Freeing unused kernel memory: 1984K
[    5.302775] Run /sbin/init as init process
[    5.834384] systemd[1]: System time before build time, advancing clock.
[    5.920029] systemd[1]: systemd 255.13^ running in system mode (+PAM -AUDIT -SELINUX -APPARMOR +IMA -SMACK +SECCOMP -GCRYPT -GNUTLS -OPENSSL +ACL +BLKID -CURL -ELFUTILS -FIDO2 -IDN2 -IDN -IPTC +KMOD -LIBCRYPTSETUP +LIBFDISK -PCRE2 -PWQUALITY -P11KIT -QRENCODE -TPM2 -BZIP2 -LZ4 -XZ -ZLIB +ZSTD -BPF_FRAMEWORK +XKBCOMMON +UTMP +SYSVINIT default-hierarchy=unified)
[    5.951545] systemd[1]: Detected architecture arm64.

Welcome to Auto Linux BSP 44.0 (scarthgap)!

[    5.979098] systemd[1]: Hostname set to <s32g274ardb2>.
[    6.581902] systemd[1]: Queued start job for default target Multi-User System.
[    6.594180] systemd[1]: Created slice Slice /system/getty.
[  OK  ] Created slice Slice /system/getty.
[    6.618339] systemd[1]: Created slice Slice /system/modprobe.
[  OK  ] Created slice Slice /system/modprobe.
[    6.642285] systemd[1]: Created slice Slice /system/serial-getty.
[  OK  ] Created slice Slice /system/serial-getty.
[    6.665710] systemd[1]: Created slice User and Session Slice.
[  OK  ] Created slice User and Session Slice.
[    6.689245] systemd[1]: Started Dispatch Password Requests to Console Directory Watch.
[  OK  ] Started Dispatch Password Requests to Console Directory Watch.
[    6.717098] systemd[1]: Started Forward Password Requests to Wall Directory Watch.
[  OK  ] Started Forward Password Requests to Wall Directory Watch.
[    6.741116] systemd[1]: Reached target Path Units.
[  OK  ] Reached target Path Units.
[    6.760914] systemd[1]: Reached target Remote File Systems.
[  OK  ] Reached target Remote File Systems.
[    6.780916] systemd[1]: Reached target Slice Units.
[  OK  ] Reached target Slice Units.
[    6.800934] systemd[1]: Reached target Swaps.
[  OK  ] Reached target Swaps.
[    6.857671] systemd[1]: Listening on RPCbind Server Activation Socket.
[  OK  ] Listening on RPCbind Server Activation Socket.
[    6.881088] systemd[1]: Reached target RPC Port Mapper.
[  OK  ] Reached target RPC Port Mapper.
[    6.901707] systemd[1]: Listening on Syslog Socket.
[  OK  ] Listening on Syslog Socket.
[    6.921304] systemd[1]: Listening on initctl Compatibility Named Pipe.
[  OK  ] Listening on initctl Compatibility Named Pipe.
[    6.951709] systemd[1]: Journal Audit Socket was skipped because of an unmet condition check (ConditionSecurity=audit).
[    6.962868] systemd[1]: Listening on Journal Socket (/dev/log).
[  OK  ] Listening on Journal Socket (/dev/log).
[    6.985680] systemd[1]: Listening on Journal Socket.
[  OK  ] Listening on Journal Socket.
[    7.005908] systemd[1]: Listening on Network Service Netlink Socket.
[  OK  ] Listening on Network Service Netlink Socket.
[    7.042486] systemd[1]: Listening on udev Control Socket.
[  OK  ] Listening on udev Control Socket.
[    7.065616] systemd[1]: Listening on udev Kernel Socket.
[  OK  ] Listening on udev Kernel Socket.
[    7.085611] systemd[1]: Listening on User Database Manager Socket.
[  OK  ] Listening on User Database Manager Socket.
[    7.133046] systemd[1]: Mounting Huge Pages File System...
         Mounting Huge Pages File System...
[    7.153358] systemd[1]: POSIX Message Queue File System was skipped because of an unmet condition check (ConditionPathExists=/proc/sys/fs/mqueue).
[    7.186890] systemd[1]: Mounting Kernel Debug File System...
         Mounting Kernel Debug File System...
[    7.209437] systemd[1]: Kernel Trace File System was skipped because of an unmet condition check (ConditionPathExists=/sys/kernel/tracing).
[    7.222200] systemd[1]: Create List of Static Device Nodes was skipped because of an unmet condition check (ConditionFileNotEmpty=/lib/modules/6.6.85-rt53-g6208e1d0d7b5/modules.devname).
[    7.242313] systemd[1]: Starting Load Kernel Module configfs...
         Starting Load Kernel Module configfs...
[    7.268513] systemd[1]: Starting Load Kernel Module drm...
         Starting Load Kernel Module drm...
[    7.292713] systemd[1]: Starting Load Kernel Module fuse...
         Starting Load Kernel Module fuse...
[    7.327295] systemd[1]: Starting RPC Bind...
         Starting RPC Bind...
[    7.345330] systemd[1]: File System Check on Root Device was skipped because of an unmet condition check (ConditionPathIsReadWrite=!/).
[    7.364702] systemd[1]: Starting Journal Service...
         Starting Journal Service...
[    7.395968] systemd[1]: Starting Load Kernel Modules...
         Starting Load Kernel Modules...
[    7.420513] systemd[1]: Starting Generate network units from Kernel command line...
         Starting Generate network units from Kernel command line...
[    7.448443] systemd[1]: Starting Remount Root and Kernel File Systems...
         Starting Remount Root and Kernel File Systems...
[    7.464924] sja1110: loading out-of-tree module taints kernel.
[    7.471093] SPI driver sja1110 has n
s32g274ardb2 login:
s32g274ardb2 login:
s32g274ardb2 login: root
root@s32g274ardb2:~# ls
benchmark_precise_sw_2024-10-11_05-42-55  cbs_benchmark_precise_sw.sh                cbs_precise_final_v7_2024-10-11_07-27-42   results.tar.gz                    run_all_precise_cbs_final_v8.sh
benchmark_results.tar.gz                  cbs_benchmark_results.csv                  cbs_precise_final_v9_2024-10-11_07-31-47   run_all_precise_cbs_benchmark.sh  run_all_precise_cbs_final_v9.sh
benchmark_results_2024-10-11_05-39-47     cbs_benchmark_results_sw.csv               cbs_precise_fixed_2024-10-11_07-16-16      run_all_precise_cbs_final_v10.sh  run_all_precise_cbs_fixed.sh
cbs.sh                                    cbs_precise_final_v10_2024-10-11_07-32-47  cbs_precise_fixed_v8_2024-10-11_07-28-55   run_all_precise_cbs_final_v11.sh  run_pro_cbs_benchmark.sh
cbs_benchmark.sh                          cbs_precise_final_v11_2024-10-11_07-37-32  cbs_precise_full_data_2024-10-11_07-03-19  run_all_precise_cbs_final_v12.sh  run_tbf_benchmark.sh
cbs_benchmark_all.sh                      cbs_precise_final_v12_2024-10-11_07-38-40  cbs_test_10Mbps.pcap                       run_all_precise_cbs_final_v5.sh   run_tbf_benchmark_final.sh
cbs_benchmark_final.sh                    cbs_precise_final_v5_2024-10-11_07-17-56   cbs_test_50Mbps.pcap                       run_all_precise_cbs_final_v6.sh   tbf_benchmark_final_v14_2024-10-11_07-41-18
cbs_benchmark_graph.sh                    cbs_precise_final_v6_2024-10-11_07-20-59   pro_benchmark_sw_2024-10-11_05-51-59       run_all_precise_cbs_final_v7.sh   tbf_precise_v13_2024-10-11_07-39-58
root@s32g274ardb2:~# vi run_all_precise_cbs_
run_all_precise_cbs_benchmark.sh  run_all_precise_cbs_final_v11.sh  run_all_precise_cbs_final_v5.sh   run_all_precise_cbs_final_v7.sh   run_all_precise_cbs_final_v9.sh
run_all_precise_cbs_final_v10.sh  run_all_precise_cbs_final_v12.sh  run_all_precise_cbs_final_v6.sh   run_all_precise_cbs_final_v8.sh   run_all_precise_cbs_fixed.sh
root@s32g274ardb2:~# vi run_all_precise_cbs_
run_all_precise_cbs_benchmark.sh  run_all_precise_cbs_final_v11.sh  run_all_precise_cbs_final_v5.sh   run_all_precise_cbs_final_v7.sh   run_all_precise_cbs_final_v9.sh
run_all_precise_cbs_final_v10.sh  run_all_precise_cbs_final_v12.sh  run_all_precise_cbs_final_v6.sh   run_all_precise_cbs_final_v8.sh   run_all_precise_cbs_fixed.sh
root@s32g274ardb2:~# vi run_all_precise_cbs_final_v
run_all_precise_cbs_final_v10.sh  run_all_precise_cbs_final_v12.sh  run_all_precise_cbs_final_v6.sh   run_all_precise_cbs_final_v8.sh
run_all_precise_cbs_final_v11.sh  run_all_precise_cbs_final_v5.sh   run_all_precise_cbs_final_v7.sh   run_all_precise_cbs_final_v9.sh
root@s32g274ardb2:~# vi run_all_precise_cbs_final_v5.sh

#!/bin/bash

# ==============================================================================
# Comprehensive High-Density CBS Benchmark Script (FINAL FIXED VERSION)
#
# - Ensures correct iperf3 -b parameter usage.
# - Confirms CBS is applied to the correct traffic class.
# - Test range: 10% down to 1% of 1Gbps link speed.
# - High-resolution data (100ms intervals).
# ==============================================================================

# --- Configuration ---
readonly IFACE="end0"
readonly PARTNER_PC_IP="192.168.1.11"
readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed

# Traffic Class (TC) Mapping Strategy:
# - We will map TOS_CLASS_A to a specific TC (TC 1, handle 1:2) for CBS.
# - Other traffic types (if any) go to default TC 0 (handle 1:1).
readonly TOS_CLASS_A=0x80 # iperf3 will send with --tos 0x80
# MQPRIO map: prio 4 (from TOS 0x80) goes to TC 1. Other prios go to TC 0.
# Linux kernel typically maps TOS 0x80 to internal priority 4.
readonly MQPRIO_MAP_PRIO_TO_TC="0 0 0 0 1 0 0 0" # prio 4 (5th element) maps to TC 1.

readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)

readonly RESULTS_BASE_DIR="cbs_precise_final_v5_$(date +%F_%H-%M-%S)"
readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"

# Test bandwidth percentages: 10% down to 1%
readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))

# --- Functions ---

# Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
setup_qdiscs() {
    local idleslope_bps=$1
    local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))

    echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."

    # 1. Replace the root qdisc with MQPRIO
    #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
    #    - map: Configured based on MQPRIO_MAP_PRIO_TO_TC
    #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
    tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
        hw 0 num_tc 2 map ${MQPRIO_MAP_PRIO_TO_TC} \
        queues 1@0 1@1
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
        return 1
    fi

    # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
    #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
    tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
        idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
        return 1
    fi
    echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2)."
    echo "INFO: Traffic with --tos ${TOS_CLASS_A} (internal prio 4) should be shaped."
    return 0
}

# Function to cleanly remove all qdiscs from the interface
clear_qdiscs() {
    tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
}

# --- Main Execution Logic ---

# 1. Initialization and setup directories
mkdir -p "${RESULTS_BASE_DIR}"
echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"

# Ensure a clean state on script start and exit
clear_qdiscs
trap clear_qdiscs EXIT
"run_all_precise_cbs_final_v5.sh" 171L, 7290B                                                                                                                                                                              1,1           Top
#!/bin/bash

# ==============================================================================
# Comprehensive High-Density CBS Benchmark Script (FINAL FIXED VERSION)
#
# - Ensures correct iperf3 -b parameter usage.
# - Confirms CBS is applied to the correct traffic class.
# - Test range: 10% down to 1% of 1Gbps link speed.
# - High-resolution data (100ms intervals).
# ==============================================================================

# --- Configuration ---
readonly IFACE="end0"
readonly PARTNER_PC_IP="192.168.1.11"
readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed

# Traffic Class (TC) Mapping Strategy:
# - We will map TOS_CLASS_A to a specific TC (TC 1, handle 1:2) for CBS.
# - Other traffic types (if any) go to default TC 0 (handle 1:1).
readonly TOS_CLASS_A=0x80 # iperf3 will send with --tos 0x80
# MQPRIO map: prio 4 (from TOS 0x80) goes to TC 1. Other prios go to TC 0.
# Linux kernel typically maps TOS 0x80 to internal priority 4.
readonly MQPRIO_MAP_PRIO_TO_TC="0 0 0 0 1 0 0 0" # prio 4 (5th element) maps to TC 1.

readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)

readonly RESULTS_BASE_DIR="cbs_precise_final_v5_$(date +%F_%H-%M-%S)"
readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"

# Test bandwidth percentages: 10% down to 1%
readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))

# --- Functions ---

# Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
setup_qdiscs() {
    local idleslope_bps=$1
    local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))

    echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."

    # 1. Replace the root qdisc with MQPRIO
    #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
    #    - map: Configured based on MQPRIO_MAP_PRIO_TO_TC
    #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
    tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
        hw 0 num_tc 2 map ${MQPRIO_MAP_PRIO_TO_TC} \
        queues 1@0 1@1
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
        return 1
    fi

    # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
    #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
    tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
        idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
        return 1
    fi
    echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2)."
    echo "INFO: Traffic with --tos ${TOS_CLASS_A} (internal prio 4) should be shaped."
    return 0
}

# Function to cleanly remove all qdiscs from the interface
clear_qdiscs() {
    tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
}

# --- Main Execution Logic ---

# 1. Initialization and setup directories
mkdir -p "${RESULTS_BASE_DIR}"
echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"

# Ensure a clean state on script start and exit
clear_qdiscs
trap clear_qdiscs EXIT
"run_all_precise_cbs_final_v5.sh" 171L, 7290B                                                                                                                                                                              47,1          Top
#!/bin/bash

# ==============================================================================
# Comprehensive High-Density CBS Benchmark Script (FINAL FIXED VERSION)
#
# - Ensures correct iperf3 -b parameter usage.
# - Confirms CBS is applied to the correct traffic class.
# - Test range: 10% down to 1% of 1Gbps link speed.
# - High-resolution data (100ms intervals).
# ==============================================================================

# --- Configuration ---
readonly IFACE="end0"
readonly PARTNER_PC_IP="192.168.1.11"
readonly LINK_SPEED_BPS=1000000000 # Assuming 1 Gbps link speed

# Traffic Class (TC) Mapping Strategy:
# - We will map TOS_CLASS_A to a specific TC (TC 1, handle 1:2) for CBS.
# - Other traffic types (if any) go to default TC 0 (handle 1:1).
readonly TOS_CLASS_A=0x80 # iperf3 will send with --tos 0x80
# MQPRIO map: prio 4 (from TOS 0x80) goes to TC 1. Other prios go to TC 0.
# Linux kernel typically maps TOS 0x80 to internal priority 4.
readonly MQPRIO_MAP_PRIO_TO_TC="0 0 0 0 1 0 0 0" # prio 4 (5th element) maps to TC 1.

readonly TEST_DURATION=60        # Duration of each iperf3 test in seconds
readonly REPORT_INTERVAL=0.1     # iperf3 reporting interval in seconds (0.1s = 100ms)

readonly RESULTS_BASE_DIR="cbs_precise_final_v5_$(date +%F_%H-%M-%S)"
readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"

# Test bandwidth percentages: 10% down to 1%
readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))


readonly RESULTS_BASE_DIR="cbs_precise_final_v5_$(date +%F_%H-%M-%S)"
readonly SUMMARY_CSV="${RESULTS_BASE_DIR}/summary_all_tests.csv"

# Test bandwidth percentages: 10% down to 1%
readonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))

# --- Functions ---

# Function to setup MQPRIO and Software CBS qdiscs for a given idleslope
setup_qdiscs() {
    local idleslope_bps=$1
    local sendslope_bps=$((idleslope_bps - LINK_SPEED_BPS))

    echo "INFO: Setting up MQPRIO and Software CBS for idleslope=${idleslope_bps}bps..."

    # 1. Replace the root qdisc with MQPRIO
    #    - num_tc 2: Use 2 TCs (TC 0 for best-effort, TC 1 for CBS traffic)
    #    - map: Configured based on MQPRIO_MAP_PRIO_TO_TC
    #    - queues 1@0 1@1: TC0 uses queue 0, TC1 uses queue 1
    tc qdisc replace dev "${IFACE}" root handle 1: mqprio \
        hw 0 num_tc 2 map ${MQPRIO_MAP_PRIO_TO_TC} \
        queues 1@0 1@1
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add MQPRIO qdisc. Aborting test scenario."
        return 1
    fi

    # 2. Add CBS qdisc as a child of MQPRIO, specifically on TC 1 (handle 1:2)
    #    TC 1 has handle 1:2. This is where the traffic from TOS_CLASS_A (prio 4) will go.
    tc qdisc replace dev "${IFACE}" parent 1:2 cbs \
        idleslope "${idleslope_bps}" sendslope "${sendslope_bps}"
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to add CBS qdisc for ${idleslope_bps}bps. Aborting test scenario."
        return 1
    fi
    echo "INFO: Qdisc setup successful. CBS applied to TC 1 (handle 1:2)."
    echo "INFO: Traffic with --tos ${TOS_CLASS_A} (internal prio 4) should be shaped."
    return 0
}

# Function to cleanly remove all qdiscs from the interface
clear_qdiscs() {
    tc qdisc del dev "${IFACE}" root > /dev/null 2>&1
}

# --- Main Execution Logic ---

# 1. Initialization and setup directories
mkdir -p "${RESULTS_BASE_DIR}"
echo "Target_Percentage(%),Target_Mbps,Measured_Average_Mbps,Unit" > "${SUMMARY_CSV}"

# Ensure a clean state on script start and exit
clear_qdiscs
trap clear_qdiscs EXIT

# 2. Pre-flight checks and user prompt
echo "=========================================================="
echo "    FINAL CBS BENCHMARK (HIGH-DENSITY & FIXED iperf3 -b)"
echo "=========================================================="
echo "INFO: This script attempts to shape traffic with --tos 0x80."
echo "INFO: Each test runs for ${TEST_DURATION} seconds with ${REPORT_INTERVAL}s reporting."
echo "INFO: Target percentages: ${edonly BANDWIDTH_PERCENTAGES=($(seq 10 -1 1))JJJJJJJJJJJJJJJJJJJANDWIDTH_PERCENTAGES[*]}% of ${LINK_SPEED_BPS}bps link."
sleep 5

# 3. Main test loop: Iterate through each target percentage
for percent in "${BANDWIDTH_PERCENTAGES[@]}"; do
    target_bps=$((LINK_SPEED_BPS * percent / 100))
    target_mbps=$((target_bps / 1000000))

    # IMPORTANT FIX: Use a very large, valid bandwidth to force iperf3 to send as fast as possible.
    # This ensures CBS is the only shaper. (e.g., 2 Gbps or 10 Gbps, converted to M)
    # Using 2000000000 for 2 Gbps
    request_mbps_iperf3=2000 # This will be 2000M = 2Gbps in iperf3 -b option

    # Define file paths for current test scenario
    current_test_dir="${RESULTS_BASE_DIR}/test_${percent}pct_target_${target_mbps}Mbps"
    mkdir -p "${current_test_dir}"
    full_iperf_log="${current_test_dir}/iperf_full_log.log"
    precise_data_csv="${current_test_dir}/precise_data_${percent}pct.csv"

    echo
    echo "----------------------------------------------------------"
    echo ">>> [TEST SCENARIO] Target: ${percent}% (${target_mbps} Mbps)"
    echo "----------------------------------------------------------"

    # 3.1. Clear previous qdiscs and set up new ones for current target
    clear_qdiscs
    sleep 1 # Short delay to ensure qdisc deletion is processed
    setup_qdiscs "${target_bps}"
    if [ $? -ne 0 ]; then
        echo "WARNING: Skipping scenario ${percent}% due to qdisc setup failure."
        echo "${percent},${target_mbps},FAILED_SETUP,N/A" >> "${SUMMARY_CSV}"
        continue
    fi

    # 3.2. Run iperf3 and capture its full output
    echo "INFO: Running iperf3 test for ${TEST_DURATION}s, requesting ${request_mbps_iperf3}M, logging to ${full_iperf_log}..."
    echo "Time_Interval(sec),Throughput(Mbits/sec)" > "${precise_data_csv}"

    stdbuf -o0 iperf3 -c "${PARTNER_PC_IP}" -u -b "${request_mbps_iperf3}M" --tos "${TOS_VALUE}" -t "${TEST_DURATION}" -i "${REPORT_INTERVAL}" -f m \
    | tee "${full_iperf_log}" \
    | grep ']' \
    | grep -v 'sender' \
    | awk '{
        interval_str = $3;
        bitrate_val = $7;

        split(interval_str, time_parts, "-");
        timestamp = time_parts[2];

        print timestamp","bitrate_val;
    }' >> "${precise_data_csv}"

    # 3.3. Parse the final summary line from the full log
    final_summary_line=$(grep ' sender' "${full_iperf_log}")

    if [ -z "${final_summary_line}" ]; then
        echo "ERROR: iperf3 test failed or produced no summary output. Check ${full_iperf_log}"
        measured_avg_mbps="FAILED"
        unit="N/A"
    else
        measured_avg_mbps=$(echo "${final_summary_line}" | awk '{print $7}')
        unit=$(echo "${final_summary_line}" | awk '{print $8}')
        echo "INFO: Test completed. Average measured rate: ${measured_avg_mbps} ${unit}"
    fi

    # 3.4. Log to summary CSV
    echo "${percent},${target_mbps},${measured_avg_mbps},${unit}" >> "${SUMMARY_CSV}"
done
                                                                                                                                                                                                                           128,31        85%
